// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: variable.proto

#ifndef PROTOBUF_variable_2eproto__INCLUDED
#define PROTOBUF_variable_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_variable_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[20];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsComplexImpl();
void InitDefaultsComplex();
void InitDefaultsArrayImpl();
void InitDefaultsArray();
void InitDefaultsErrorImpl();
void InitDefaultsError();
void InitDefaultsSheetReferenceImpl();
void InitDefaultsSheetReference();
void InitDefaultsCodeImpl();
void InitDefaultsCode();
void InitDefaultsCompositeFunctionCallImpl();
void InitDefaultsCompositeFunctionCall();
void InitDefaultsGraphicsUpdateImpl();
void InitDefaultsGraphicsUpdate();
void InitDefaultsGraphicsCommandImpl();
void InitDefaultsGraphicsCommand();
void InitDefaultsColorImpl();
void InitDefaultsColor();
void InitDefaultsGraphicsContextImpl();
void InitDefaultsGraphicsContext();
void InitDefaultsMIMEDataImpl();
void InitDefaultsMIMEData();
void InitDefaultsConsoleImpl();
void InitDefaultsConsole();
void InitDefaultsFunctionListImpl();
void InitDefaultsFunctionList();
void InitDefaultsEnumValueImpl();
void InitDefaultsEnumValue();
void InitDefaultsEnumTypeImpl();
void InitDefaultsEnumType();
void InitDefaultsCallResponseImpl();
void InitDefaultsCallResponse();
inline void InitDefaults() {
  InitDefaultsComplex();
  InitDefaultsArray();
  InitDefaultsError();
  InitDefaultsSheetReference();
  InitDefaultsCode();
  InitDefaultsCompositeFunctionCall();
  InitDefaultsGraphicsUpdate();
  InitDefaultsGraphicsCommand();
  InitDefaultsColor();
  InitDefaultsGraphicsContext();
  InitDefaultsMIMEData();
  InitDefaultsConsole();
  InitDefaultsFunctionList();
  InitDefaultsEnumValue();
  InitDefaultsEnumType();
  InitDefaultsCallResponse();
}
}  // namespace protobuf_variable_2eproto
namespace BERTBuffers {
class Array;
class ArrayDefaultTypeInternal;
extern ArrayDefaultTypeInternal _Array_default_instance_;
class CallResponse;
class CallResponseDefaultTypeInternal;
extern CallResponseDefaultTypeInternal _CallResponse_default_instance_;
class Code;
class CodeDefaultTypeInternal;
extern CodeDefaultTypeInternal _Code_default_instance_;
class Color;
class ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class Complex;
class ComplexDefaultTypeInternal;
extern ComplexDefaultTypeInternal _Complex_default_instance_;
class CompositeFunctionCall;
class CompositeFunctionCallDefaultTypeInternal;
extern CompositeFunctionCallDefaultTypeInternal _CompositeFunctionCall_default_instance_;
class Console;
class ConsoleDefaultTypeInternal;
extern ConsoleDefaultTypeInternal _Console_default_instance_;
class EnumType;
class EnumTypeDefaultTypeInternal;
extern EnumTypeDefaultTypeInternal _EnumType_default_instance_;
class EnumValue;
class EnumValueDefaultTypeInternal;
extern EnumValueDefaultTypeInternal _EnumValue_default_instance_;
class Error;
class ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class ExternalPointer;
class ExternalPointerDefaultTypeInternal;
extern ExternalPointerDefaultTypeInternal _ExternalPointer_default_instance_;
class FunctionDescriptor;
class FunctionDescriptorDefaultTypeInternal;
extern FunctionDescriptorDefaultTypeInternal _FunctionDescriptor_default_instance_;
class FunctionElement;
class FunctionElementDefaultTypeInternal;
extern FunctionElementDefaultTypeInternal _FunctionElement_default_instance_;
class FunctionList;
class FunctionListDefaultTypeInternal;
extern FunctionListDefaultTypeInternal _FunctionList_default_instance_;
class GraphicsCommand;
class GraphicsCommandDefaultTypeInternal;
extern GraphicsCommandDefaultTypeInternal _GraphicsCommand_default_instance_;
class GraphicsContext;
class GraphicsContextDefaultTypeInternal;
extern GraphicsContextDefaultTypeInternal _GraphicsContext_default_instance_;
class GraphicsUpdate;
class GraphicsUpdateDefaultTypeInternal;
extern GraphicsUpdateDefaultTypeInternal _GraphicsUpdate_default_instance_;
class MIMEData;
class MIMEDataDefaultTypeInternal;
extern MIMEDataDefaultTypeInternal _MIMEData_default_instance_;
class SheetReference;
class SheetReferenceDefaultTypeInternal;
extern SheetReferenceDefaultTypeInternal _SheetReference_default_instance_;
class Variable;
class VariableDefaultTypeInternal;
extern VariableDefaultTypeInternal _Variable_default_instance_;
}  // namespace BERTBuffers
namespace BERTBuffers {

enum ErrorType {
  GENERIC = 0,
  NA = 1,
  INF = 2,
  PARSE = 3,
  EXECUTION = 4,
  OTHER = 15,
  ErrorType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ErrorType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ErrorType_IsValid(int value);
const ErrorType ErrorType_MIN = GENERIC;
const ErrorType ErrorType_MAX = OTHER;
const int ErrorType_ARRAYSIZE = ErrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorType_descriptor();
inline const ::std::string& ErrorType_Name(ErrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorType_descriptor(), value);
}
inline bool ErrorType_Parse(
    const ::std::string& name, ErrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorType>(
    ErrorType_descriptor(), name, value);
}
enum CallType {
  method = 0,
  get = 1,
  put = 2,
  CallType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CallType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CallType_IsValid(int value);
const CallType CallType_MIN = method;
const CallType CallType_MAX = put;
const int CallType_ARRAYSIZE = CallType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CallType_descriptor();
inline const ::std::string& CallType_Name(CallType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CallType_descriptor(), value);
}
inline bool CallType_Parse(
    const ::std::string& name, CallType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CallType>(
    CallType_descriptor(), name, value);
}
enum CallTarget {
  language = 0,
  COM = 1,
  system = 2,
  graphics = 3,
  CallTarget_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CallTarget_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CallTarget_IsValid(int value);
const CallTarget CallTarget_MIN = language;
const CallTarget CallTarget_MAX = graphics;
const int CallTarget_ARRAYSIZE = CallTarget_MAX + 1;

const ::google::protobuf::EnumDescriptor* CallTarget_descriptor();
inline const ::std::string& CallTarget_Name(CallTarget value) {
  return ::google::protobuf::internal::NameOfEnum(
    CallTarget_descriptor(), value);
}
inline bool CallTarget_Parse(
    const ::std::string& name, CallTarget* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CallTarget>(
    CallTarget_descriptor(), name, value);
}
enum GraphicsUpdateCommand {
  update = 0,
  query_size = 1,
  GraphicsUpdateCommand_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GraphicsUpdateCommand_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GraphicsUpdateCommand_IsValid(int value);
const GraphicsUpdateCommand GraphicsUpdateCommand_MIN = update;
const GraphicsUpdateCommand GraphicsUpdateCommand_MAX = query_size;
const int GraphicsUpdateCommand_ARRAYSIZE = GraphicsUpdateCommand_MAX + 1;

const ::google::protobuf::EnumDescriptor* GraphicsUpdateCommand_descriptor();
inline const ::std::string& GraphicsUpdateCommand_Name(GraphicsUpdateCommand value) {
  return ::google::protobuf::internal::NameOfEnum(
    GraphicsUpdateCommand_descriptor(), value);
}
inline bool GraphicsUpdateCommand_Parse(
    const ::std::string& name, GraphicsUpdateCommand* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GraphicsUpdateCommand>(
    GraphicsUpdateCommand_descriptor(), name, value);
}
// ===================================================================

class Complex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.Complex) */ {
 public:
  Complex();
  virtual ~Complex();

  Complex(const Complex& from);

  inline Complex& operator=(const Complex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Complex(Complex&& from) noexcept
    : Complex() {
    *this = ::std::move(from);
  }

  inline Complex& operator=(Complex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Complex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Complex* internal_default_instance() {
    return reinterpret_cast<const Complex*>(
               &_Complex_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Complex* other);
  friend void swap(Complex& a, Complex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Complex* New() const PROTOBUF_FINAL { return New(NULL); }

  Complex* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Complex& from);
  void MergeFrom(const Complex& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Complex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double r = 1;
  void clear_r();
  static const int kRFieldNumber = 1;
  double r() const;
  void set_r(double value);

  // double i = 2;
  void clear_i();
  static const int kIFieldNumber = 2;
  double i() const;
  void set_i(double value);

  // @@protoc_insertion_point(class_scope:BERTBuffers.Complex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double r_;
  double i_;
  mutable int _cached_size_;
  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsComplexImpl();
};
// -------------------------------------------------------------------

class Array : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.Array) */ {
 public:
  Array();
  virtual ~Array();

  Array(const Array& from);

  inline Array& operator=(const Array& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Array(Array&& from) noexcept
    : Array() {
    *this = ::std::move(from);
  }

  inline Array& operator=(Array&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Array& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Array* internal_default_instance() {
    return reinterpret_cast<const Array*>(
               &_Array_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Array* other);
  friend void swap(Array& a, Array& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Array* New() const PROTOBUF_FINAL { return New(NULL); }

  Array* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Array& from);
  void MergeFrom(const Array& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Array* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BERTBuffers.Variable data = 3;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::BERTBuffers::Variable& data(int index) const;
  ::BERTBuffers::Variable* mutable_data(int index);
  ::BERTBuffers::Variable* add_data();
  ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable >&
      data() const;

  // repeated string rownames = 4;
  int rownames_size() const;
  void clear_rownames();
  static const int kRownamesFieldNumber = 4;
  const ::std::string& rownames(int index) const;
  ::std::string* mutable_rownames(int index);
  void set_rownames(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_rownames(int index, ::std::string&& value);
  #endif
  void set_rownames(int index, const char* value);
  void set_rownames(int index, const char* value, size_t size);
  ::std::string* add_rownames();
  void add_rownames(const ::std::string& value);
  #if LANG_CXX11
  void add_rownames(::std::string&& value);
  #endif
  void add_rownames(const char* value);
  void add_rownames(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& rownames() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_rownames();

  // repeated string colnames = 5;
  int colnames_size() const;
  void clear_colnames();
  static const int kColnamesFieldNumber = 5;
  const ::std::string& colnames(int index) const;
  ::std::string* mutable_colnames(int index);
  void set_colnames(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_colnames(int index, ::std::string&& value);
  #endif
  void set_colnames(int index, const char* value);
  void set_colnames(int index, const char* value, size_t size);
  ::std::string* add_colnames();
  void add_colnames(const ::std::string& value);
  #if LANG_CXX11
  void add_colnames(::std::string&& value);
  #endif
  void add_colnames(const char* value);
  void add_colnames(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& colnames() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_colnames();

  // int32 rows = 1;
  void clear_rows();
  static const int kRowsFieldNumber = 1;
  ::google::protobuf::int32 rows() const;
  void set_rows(::google::protobuf::int32 value);

  // int32 cols = 2;
  void clear_cols();
  static const int kColsFieldNumber = 2;
  ::google::protobuf::int32 cols() const;
  void set_cols(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BERTBuffers.Array)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable > data_;
  ::google::protobuf::RepeatedPtrField< ::std::string> rownames_;
  ::google::protobuf::RepeatedPtrField< ::std::string> colnames_;
  ::google::protobuf::int32 rows_;
  ::google::protobuf::int32 cols_;
  mutable int _cached_size_;
  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsArrayImpl();
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(Error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Error* other);
  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const PROTOBUF_FINAL { return New(NULL); }

  Error* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .BERTBuffers.ErrorType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::BERTBuffers::ErrorType type() const;
  void set_type(::BERTBuffers::ErrorType value);

  // @@protoc_insertion_point(class_scope:BERTBuffers.Error)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsErrorImpl();
};
// -------------------------------------------------------------------

class SheetReference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.SheetReference) */ {
 public:
  SheetReference();
  virtual ~SheetReference();

  SheetReference(const SheetReference& from);

  inline SheetReference& operator=(const SheetReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SheetReference(SheetReference&& from) noexcept
    : SheetReference() {
    *this = ::std::move(from);
  }

  inline SheetReference& operator=(SheetReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SheetReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SheetReference* internal_default_instance() {
    return reinterpret_cast<const SheetReference*>(
               &_SheetReference_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SheetReference* other);
  friend void swap(SheetReference& a, SheetReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SheetReference* New() const PROTOBUF_FINAL { return New(NULL); }

  SheetReference* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SheetReference& from);
  void MergeFrom(const SheetReference& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SheetReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 start_row = 1;
  void clear_start_row();
  static const int kStartRowFieldNumber = 1;
  ::google::protobuf::uint32 start_row() const;
  void set_start_row(::google::protobuf::uint32 value);

  // uint32 start_column = 2;
  void clear_start_column();
  static const int kStartColumnFieldNumber = 2;
  ::google::protobuf::uint32 start_column() const;
  void set_start_column(::google::protobuf::uint32 value);

  // uint32 end_row = 3;
  void clear_end_row();
  static const int kEndRowFieldNumber = 3;
  ::google::protobuf::uint32 end_row() const;
  void set_end_row(::google::protobuf::uint32 value);

  // uint32 end_column = 4;
  void clear_end_column();
  static const int kEndColumnFieldNumber = 4;
  ::google::protobuf::uint32 end_column() const;
  void set_end_column(::google::protobuf::uint32 value);

  // uint64 sheet_id = 5;
  void clear_sheet_id();
  static const int kSheetIdFieldNumber = 5;
  ::google::protobuf::uint64 sheet_id() const;
  void set_sheet_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:BERTBuffers.SheetReference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 start_row_;
  ::google::protobuf::uint32 start_column_;
  ::google::protobuf::uint32 end_row_;
  ::google::protobuf::uint32 end_column_;
  ::google::protobuf::uint64 sheet_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsSheetReferenceImpl();
};
// -------------------------------------------------------------------

class Variable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.Variable) */ {
 public:
  Variable();
  virtual ~Variable();

  Variable(const Variable& from);

  inline Variable& operator=(const Variable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Variable(Variable&& from) noexcept
    : Variable() {
    *this = ::std::move(from);
  }

  inline Variable& operator=(Variable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Variable& default_instance();

  enum ValueCase {
    kNil = 1,
    kMissing = 2,
    kErr = 3,
    kInteger = 5,
    kReal = 6,
    kStr = 7,
    kBoolean = 8,
    kCpx = 9,
    kArr = 10,
    kRef = 11,
    kComPointer = 12,
    kGraphics = 13,
    kCacheReference = 14,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Variable* internal_default_instance() {
    return reinterpret_cast<const Variable*>(
               &_Variable_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Variable* other);
  friend void swap(Variable& a, Variable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Variable* New() const PROTOBUF_FINAL { return New(NULL); }

  Variable* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Variable& from);
  void MergeFrom(const Variable& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Variable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 15;
  void clear_name();
  static const int kNameFieldNumber = 15;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bool nil = 1;
  private:
  bool has_nil() const;
  public:
  void clear_nil();
  static const int kNilFieldNumber = 1;
  bool nil() const;
  void set_nil(bool value);

  // bool missing = 2;
  private:
  bool has_missing() const;
  public:
  void clear_missing();
  static const int kMissingFieldNumber = 2;
  bool missing() const;
  void set_missing(bool value);

  // .BERTBuffers.Error err = 3;
  bool has_err() const;
  void clear_err();
  static const int kErrFieldNumber = 3;
  const ::BERTBuffers::Error& err() const;
  ::BERTBuffers::Error* release_err();
  ::BERTBuffers::Error* mutable_err();
  void set_allocated_err(::BERTBuffers::Error* err);

  // int32 integer = 5;
  private:
  bool has_integer() const;
  public:
  void clear_integer();
  static const int kIntegerFieldNumber = 5;
  ::google::protobuf::int32 integer() const;
  void set_integer(::google::protobuf::int32 value);

  // double real = 6;
  private:
  bool has_real() const;
  public:
  void clear_real();
  static const int kRealFieldNumber = 6;
  double real() const;
  void set_real(double value);

  // string str = 7;
  private:
  bool has_str() const;
  public:
  void clear_str();
  static const int kStrFieldNumber = 7;
  const ::std::string& str() const;
  void set_str(const ::std::string& value);
  #if LANG_CXX11
  void set_str(::std::string&& value);
  #endif
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  ::std::string* mutable_str();
  ::std::string* release_str();
  void set_allocated_str(::std::string* str);

  // bool boolean = 8;
  private:
  bool has_boolean() const;
  public:
  void clear_boolean();
  static const int kBooleanFieldNumber = 8;
  bool boolean() const;
  void set_boolean(bool value);

  // .BERTBuffers.Complex cpx = 9;
  bool has_cpx() const;
  void clear_cpx();
  static const int kCpxFieldNumber = 9;
  const ::BERTBuffers::Complex& cpx() const;
  ::BERTBuffers::Complex* release_cpx();
  ::BERTBuffers::Complex* mutable_cpx();
  void set_allocated_cpx(::BERTBuffers::Complex* cpx);

  // .BERTBuffers.Array arr = 10;
  bool has_arr() const;
  void clear_arr();
  static const int kArrFieldNumber = 10;
  const ::BERTBuffers::Array& arr() const;
  ::BERTBuffers::Array* release_arr();
  ::BERTBuffers::Array* mutable_arr();
  void set_allocated_arr(::BERTBuffers::Array* arr);

  // .BERTBuffers.SheetReference ref = 11;
  bool has_ref() const;
  void clear_ref();
  static const int kRefFieldNumber = 11;
  const ::BERTBuffers::SheetReference& ref() const;
  ::BERTBuffers::SheetReference* release_ref();
  ::BERTBuffers::SheetReference* mutable_ref();
  void set_allocated_ref(::BERTBuffers::SheetReference* ref);

  // .BERTBuffers.ExternalPointer com_pointer = 12;
  bool has_com_pointer() const;
  void clear_com_pointer();
  static const int kComPointerFieldNumber = 12;
  const ::BERTBuffers::ExternalPointer& com_pointer() const;
  ::BERTBuffers::ExternalPointer* release_com_pointer();
  ::BERTBuffers::ExternalPointer* mutable_com_pointer();
  void set_allocated_com_pointer(::BERTBuffers::ExternalPointer* com_pointer);

  // .BERTBuffers.GraphicsUpdate graphics = 13;
  bool has_graphics() const;
  void clear_graphics();
  static const int kGraphicsFieldNumber = 13;
  const ::BERTBuffers::GraphicsUpdate& graphics() const;
  ::BERTBuffers::GraphicsUpdate* release_graphics();
  ::BERTBuffers::GraphicsUpdate* mutable_graphics();
  void set_allocated_graphics(::BERTBuffers::GraphicsUpdate* graphics);

  // uint32 cache_reference = 14;
  private:
  bool has_cache_reference() const;
  public:
  void clear_cache_reference();
  static const int kCacheReferenceFieldNumber = 14;
  ::google::protobuf::uint32 cache_reference() const;
  void set_cache_reference(::google::protobuf::uint32 value);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:BERTBuffers.Variable)
 private:
  void set_has_nil();
  void set_has_missing();
  void set_has_err();
  void set_has_integer();
  void set_has_real();
  void set_has_str();
  void set_has_boolean();
  void set_has_cpx();
  void set_has_arr();
  void set_has_ref();
  void set_has_com_pointer();
  void set_has_graphics();
  void set_has_cache_reference();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  union ValueUnion {
    ValueUnion() {}
    bool nil_;
    bool missing_;
    ::BERTBuffers::Error* err_;
    ::google::protobuf::int32 integer_;
    double real_;
    ::google::protobuf::internal::ArenaStringPtr str_;
    bool boolean_;
    ::BERTBuffers::Complex* cpx_;
    ::BERTBuffers::Array* arr_;
    ::BERTBuffers::SheetReference* ref_;
    ::BERTBuffers::ExternalPointer* com_pointer_;
    ::BERTBuffers::GraphicsUpdate* graphics_;
    ::google::protobuf::uint32 cache_reference_;
  } value_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsArrayImpl();
};
// -------------------------------------------------------------------

class Code : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.Code) */ {
 public:
  Code();
  virtual ~Code();

  Code(const Code& from);

  inline Code& operator=(const Code& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Code(Code&& from) noexcept
    : Code() {
    *this = ::std::move(from);
  }

  inline Code& operator=(Code&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Code& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Code* internal_default_instance() {
    return reinterpret_cast<const Code*>(
               &_Code_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Code* other);
  friend void swap(Code& a, Code& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Code* New() const PROTOBUF_FINAL { return New(NULL); }

  Code* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Code& from);
  void MergeFrom(const Code& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Code* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string line = 1;
  int line_size() const;
  void clear_line();
  static const int kLineFieldNumber = 1;
  const ::std::string& line(int index) const;
  ::std::string* mutable_line(int index);
  void set_line(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_line(int index, ::std::string&& value);
  #endif
  void set_line(int index, const char* value);
  void set_line(int index, const char* value, size_t size);
  ::std::string* add_line();
  void add_line(const ::std::string& value);
  #if LANG_CXX11
  void add_line(::std::string&& value);
  #endif
  void add_line(const char* value);
  void add_line(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& line() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_line();

  // bool startup = 2;
  void clear_startup();
  static const int kStartupFieldNumber = 2;
  bool startup() const;
  void set_startup(bool value);

  // @@protoc_insertion_point(class_scope:BERTBuffers.Code)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> line_;
  bool startup_;
  mutable int _cached_size_;
  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsCodeImpl();
};
// -------------------------------------------------------------------

class CompositeFunctionCall : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.CompositeFunctionCall) */ {
 public:
  CompositeFunctionCall();
  virtual ~CompositeFunctionCall();

  CompositeFunctionCall(const CompositeFunctionCall& from);

  inline CompositeFunctionCall& operator=(const CompositeFunctionCall& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CompositeFunctionCall(CompositeFunctionCall&& from) noexcept
    : CompositeFunctionCall() {
    *this = ::std::move(from);
  }

  inline CompositeFunctionCall& operator=(CompositeFunctionCall&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompositeFunctionCall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompositeFunctionCall* internal_default_instance() {
    return reinterpret_cast<const CompositeFunctionCall*>(
               &_CompositeFunctionCall_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(CompositeFunctionCall* other);
  friend void swap(CompositeFunctionCall& a, CompositeFunctionCall& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompositeFunctionCall* New() const PROTOBUF_FINAL { return New(NULL); }

  CompositeFunctionCall* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CompositeFunctionCall& from);
  void MergeFrom(const CompositeFunctionCall& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CompositeFunctionCall* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BERTBuffers.Variable arguments = 2;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 2;
  const ::BERTBuffers::Variable& arguments(int index) const;
  ::BERTBuffers::Variable* mutable_arguments(int index);
  ::BERTBuffers::Variable* add_arguments();
  ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable >*
      mutable_arguments();
  const ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable >&
      arguments() const;

  // string function = 1;
  void clear_function();
  static const int kFunctionFieldNumber = 1;
  const ::std::string& function() const;
  void set_function(const ::std::string& value);
  #if LANG_CXX11
  void set_function(::std::string&& value);
  #endif
  void set_function(const char* value);
  void set_function(const char* value, size_t size);
  ::std::string* mutable_function();
  ::std::string* release_function();
  void set_allocated_function(::std::string* function);

  // uint64 pointer = 3;
  void clear_pointer();
  static const int kPointerFieldNumber = 3;
  ::google::protobuf::uint64 pointer() const;
  void set_pointer(::google::protobuf::uint64 value);

  // uint32 index = 4;
  void clear_index();
  static const int kIndexFieldNumber = 4;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // .BERTBuffers.CallType type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::BERTBuffers::CallType type() const;
  void set_type(::BERTBuffers::CallType value);

  // .BERTBuffers.CallTarget target = 6;
  void clear_target();
  static const int kTargetFieldNumber = 6;
  ::BERTBuffers::CallTarget target() const;
  void set_target(::BERTBuffers::CallTarget value);

  // uint32 flags = 7;
  void clear_flags();
  static const int kFlagsFieldNumber = 7;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:BERTBuffers.CompositeFunctionCall)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable > arguments_;
  ::google::protobuf::internal::ArenaStringPtr function_;
  ::google::protobuf::uint64 pointer_;
  ::google::protobuf::uint32 index_;
  int type_;
  int target_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsCompositeFunctionCallImpl();
};
// -------------------------------------------------------------------

class GraphicsUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.GraphicsUpdate) */ {
 public:
  GraphicsUpdate();
  virtual ~GraphicsUpdate();

  GraphicsUpdate(const GraphicsUpdate& from);

  inline GraphicsUpdate& operator=(const GraphicsUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GraphicsUpdate(GraphicsUpdate&& from) noexcept
    : GraphicsUpdate() {
    *this = ::std::move(from);
  }

  inline GraphicsUpdate& operator=(GraphicsUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphicsUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphicsUpdate* internal_default_instance() {
    return reinterpret_cast<const GraphicsUpdate*>(
               &_GraphicsUpdate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(GraphicsUpdate* other);
  friend void swap(GraphicsUpdate& a, GraphicsUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GraphicsUpdate* New() const PROTOBUF_FINAL { return New(NULL); }

  GraphicsUpdate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GraphicsUpdate& from);
  void MergeFrom(const GraphicsUpdate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GraphicsUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string path = 3;
  void clear_path();
  static const int kPathFieldNumber = 3;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // .BERTBuffers.GraphicsUpdateCommand command = 1;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  ::BERTBuffers::GraphicsUpdateCommand command() const;
  void set_command(::BERTBuffers::GraphicsUpdateCommand value);

  // uint32 width = 4;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 5;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:BERTBuffers.GraphicsUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  int command_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  mutable int _cached_size_;
  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsGraphicsUpdateImpl();
};
// -------------------------------------------------------------------

class GraphicsCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.GraphicsCommand) */ {
 public:
  GraphicsCommand();
  virtual ~GraphicsCommand();

  GraphicsCommand(const GraphicsCommand& from);

  inline GraphicsCommand& operator=(const GraphicsCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GraphicsCommand(GraphicsCommand&& from) noexcept
    : GraphicsCommand() {
    *this = ::std::move(from);
  }

  inline GraphicsCommand& operator=(GraphicsCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphicsCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphicsCommand* internal_default_instance() {
    return reinterpret_cast<const GraphicsCommand*>(
               &_GraphicsCommand_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(GraphicsCommand* other);
  friend void swap(GraphicsCommand& a, GraphicsCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GraphicsCommand* New() const PROTOBUF_FINAL { return New(NULL); }

  GraphicsCommand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GraphicsCommand& from);
  void MergeFrom(const GraphicsCommand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GraphicsCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double x = 2;
  int x_size() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  double x(int index) const;
  void set_x(int index, double value);
  void add_x(double value);
  const ::google::protobuf::RepeatedField< double >&
      x() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_x();

  // repeated double y = 3;
  int y_size() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  double y(int index) const;
  void set_y(int index, double value);
  void add_y(double value);
  const ::google::protobuf::RepeatedField< double >&
      y() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_y();

  // string command = 1;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  const ::std::string& command() const;
  void set_command(const ::std::string& value);
  #if LANG_CXX11
  void set_command(::std::string&& value);
  #endif
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  ::std::string* mutable_command();
  ::std::string* release_command();
  void set_allocated_command(::std::string* command);

  // string text = 6;
  void clear_text();
  static const int kTextFieldNumber = 6;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // bytes raster = 9;
  void clear_raster();
  static const int kRasterFieldNumber = 9;
  const ::std::string& raster() const;
  void set_raster(const ::std::string& value);
  #if LANG_CXX11
  void set_raster(::std::string&& value);
  #endif
  void set_raster(const char* value);
  void set_raster(const void* value, size_t size);
  ::std::string* mutable_raster();
  ::std::string* release_raster();
  void set_allocated_raster(::std::string* raster);

  // string device_type = 14;
  void clear_device_type();
  static const int kDeviceTypeFieldNumber = 14;
  const ::std::string& device_type() const;
  void set_device_type(const ::std::string& value);
  #if LANG_CXX11
  void set_device_type(::std::string&& value);
  #endif
  void set_device_type(const char* value);
  void set_device_type(const char* value, size_t size);
  ::std::string* mutable_device_type();
  ::std::string* release_device_type();
  void set_allocated_device_type(::std::string* device_type);

  // .BERTBuffers.GraphicsContext context = 15;
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 15;
  const ::BERTBuffers::GraphicsContext& context() const;
  ::BERTBuffers::GraphicsContext* release_context();
  ::BERTBuffers::GraphicsContext* mutable_context();
  void set_allocated_context(::BERTBuffers::GraphicsContext* context);

  // double r = 4;
  void clear_r();
  static const int kRFieldNumber = 4;
  double r() const;
  void set_r(double value);

  // double rot = 5;
  void clear_rot();
  static const int kRotFieldNumber = 5;
  double rot() const;
  void set_rot(double value);

  // double hadj = 8;
  void clear_hadj();
  static const int kHadjFieldNumber = 8;
  double hadj() const;
  void set_hadj(double value);

  // bool filled = 7;
  void clear_filled();
  static const int kFilledFieldNumber = 7;
  bool filled() const;
  void set_filled(bool value);

  // bool interpolate = 10;
  void clear_interpolate();
  static const int kInterpolateFieldNumber = 10;
  bool interpolate() const;
  void set_interpolate(bool value);

  // @@protoc_insertion_point(class_scope:BERTBuffers.GraphicsCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > x_;
  mutable int _x_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > y_;
  mutable int _y_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr command_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr raster_;
  ::google::protobuf::internal::ArenaStringPtr device_type_;
  ::BERTBuffers::GraphicsContext* context_;
  double r_;
  double rot_;
  double hadj_;
  bool filled_;
  bool interpolate_;
  mutable int _cached_size_;
  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsGraphicsCommandImpl();
};
// -------------------------------------------------------------------

class Color : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.Color) */ {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(Color&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Color& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Color* other);
  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const PROTOBUF_FINAL { return New(NULL); }

  Color* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Color* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 a = 1;
  void clear_a();
  static const int kAFieldNumber = 1;
  ::google::protobuf::uint32 a() const;
  void set_a(::google::protobuf::uint32 value);

  // uint32 r = 2;
  void clear_r();
  static const int kRFieldNumber = 2;
  ::google::protobuf::uint32 r() const;
  void set_r(::google::protobuf::uint32 value);

  // uint32 g = 3;
  void clear_g();
  static const int kGFieldNumber = 3;
  ::google::protobuf::uint32 g() const;
  void set_g(::google::protobuf::uint32 value);

  // uint32 b = 4;
  void clear_b();
  static const int kBFieldNumber = 4;
  ::google::protobuf::uint32 b() const;
  void set_b(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:BERTBuffers.Color)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 a_;
  ::google::protobuf::uint32 r_;
  ::google::protobuf::uint32 g_;
  ::google::protobuf::uint32 b_;
  mutable int _cached_size_;
  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsColorImpl();
};
// -------------------------------------------------------------------

class GraphicsContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.GraphicsContext) */ {
 public:
  GraphicsContext();
  virtual ~GraphicsContext();

  GraphicsContext(const GraphicsContext& from);

  inline GraphicsContext& operator=(const GraphicsContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GraphicsContext(GraphicsContext&& from) noexcept
    : GraphicsContext() {
    *this = ::std::move(from);
  }

  inline GraphicsContext& operator=(GraphicsContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphicsContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphicsContext* internal_default_instance() {
    return reinterpret_cast<const GraphicsContext*>(
               &_GraphicsContext_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(GraphicsContext* other);
  friend void swap(GraphicsContext& a, GraphicsContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GraphicsContext* New() const PROTOBUF_FINAL { return New(NULL); }

  GraphicsContext* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GraphicsContext& from);
  void MergeFrom(const GraphicsContext& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GraphicsContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fontfamily = 13;
  void clear_fontfamily();
  static const int kFontfamilyFieldNumber = 13;
  const ::std::string& fontfamily() const;
  void set_fontfamily(const ::std::string& value);
  #if LANG_CXX11
  void set_fontfamily(::std::string&& value);
  #endif
  void set_fontfamily(const char* value);
  void set_fontfamily(const char* value, size_t size);
  ::std::string* mutable_fontfamily();
  ::std::string* release_fontfamily();
  void set_allocated_fontfamily(::std::string* fontfamily);

  // .BERTBuffers.Color col = 1;
  bool has_col() const;
  void clear_col();
  static const int kColFieldNumber = 1;
  const ::BERTBuffers::Color& col() const;
  ::BERTBuffers::Color* release_col();
  ::BERTBuffers::Color* mutable_col();
  void set_allocated_col(::BERTBuffers::Color* col);

  // .BERTBuffers.Color fill = 2;
  bool has_fill() const;
  void clear_fill();
  static const int kFillFieldNumber = 2;
  const ::BERTBuffers::Color& fill() const;
  ::BERTBuffers::Color* release_fill();
  ::BERTBuffers::Color* mutable_fill();
  void set_allocated_fill(::BERTBuffers::Color* fill);

  // double gamma = 3;
  void clear_gamma();
  static const int kGammaFieldNumber = 3;
  double gamma() const;
  void set_gamma(double value);

  // double lwd = 4;
  void clear_lwd();
  static const int kLwdFieldNumber = 4;
  double lwd() const;
  void set_lwd(double value);

  // int32 lty = 5;
  void clear_lty();
  static const int kLtyFieldNumber = 5;
  ::google::protobuf::int32 lty() const;
  void set_lty(::google::protobuf::int32 value);

  // int32 lend = 6;
  void clear_lend();
  static const int kLendFieldNumber = 6;
  ::google::protobuf::int32 lend() const;
  void set_lend(::google::protobuf::int32 value);

  // double lmitre = 8;
  void clear_lmitre();
  static const int kLmitreFieldNumber = 8;
  double lmitre() const;
  void set_lmitre(double value);

  // double cex = 9;
  void clear_cex();
  static const int kCexFieldNumber = 9;
  double cex() const;
  void set_cex(double value);

  // int32 ljoin = 7;
  void clear_ljoin();
  static const int kLjoinFieldNumber = 7;
  ::google::protobuf::int32 ljoin() const;
  void set_ljoin(::google::protobuf::int32 value);

  // int32 fontface = 12;
  void clear_fontface();
  static const int kFontfaceFieldNumber = 12;
  ::google::protobuf::int32 fontface() const;
  void set_fontface(::google::protobuf::int32 value);

  // double ps = 10;
  void clear_ps();
  static const int kPsFieldNumber = 10;
  double ps() const;
  void set_ps(double value);

  // double lineheight = 11;
  void clear_lineheight();
  static const int kLineheightFieldNumber = 11;
  double lineheight() const;
  void set_lineheight(double value);

  // @@protoc_insertion_point(class_scope:BERTBuffers.GraphicsContext)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fontfamily_;
  ::BERTBuffers::Color* col_;
  ::BERTBuffers::Color* fill_;
  double gamma_;
  double lwd_;
  ::google::protobuf::int32 lty_;
  ::google::protobuf::int32 lend_;
  double lmitre_;
  double cex_;
  ::google::protobuf::int32 ljoin_;
  ::google::protobuf::int32 fontface_;
  double ps_;
  double lineheight_;
  mutable int _cached_size_;
  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsGraphicsContextImpl();
};
// -------------------------------------------------------------------

class MIMEData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.MIMEData) */ {
 public:
  MIMEData();
  virtual ~MIMEData();

  MIMEData(const MIMEData& from);

  inline MIMEData& operator=(const MIMEData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MIMEData(MIMEData&& from) noexcept
    : MIMEData() {
    *this = ::std::move(from);
  }

  inline MIMEData& operator=(MIMEData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MIMEData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MIMEData* internal_default_instance() {
    return reinterpret_cast<const MIMEData*>(
               &_MIMEData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(MIMEData* other);
  friend void swap(MIMEData& a, MIMEData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MIMEData* New() const PROTOBUF_FINAL { return New(NULL); }

  MIMEData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MIMEData& from);
  void MergeFrom(const MIMEData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MIMEData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string mime_type = 1;
  void clear_mime_type();
  static const int kMimeTypeFieldNumber = 1;
  const ::std::string& mime_type() const;
  void set_mime_type(const ::std::string& value);
  #if LANG_CXX11
  void set_mime_type(::std::string&& value);
  #endif
  void set_mime_type(const char* value);
  void set_mime_type(const char* value, size_t size);
  ::std::string* mutable_mime_type();
  ::std::string* release_mime_type();
  void set_allocated_mime_type(::std::string* mime_type);

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:BERTBuffers.MIMEData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mime_type_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsMIMEDataImpl();
};
// -------------------------------------------------------------------

class Console : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.Console) */ {
 public:
  Console();
  virtual ~Console();

  Console(const Console& from);

  inline Console& operator=(const Console& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Console(Console&& from) noexcept
    : Console() {
    *this = ::std::move(from);
  }

  inline Console& operator=(Console&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Console& default_instance();

  enum MessageCase {
    kText = 1,
    kErr = 2,
    kPrompt = 3,
    kGraphics = 4,
    kMimeData = 5,
    kHistory = 6,
    MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Console* internal_default_instance() {
    return reinterpret_cast<const Console*>(
               &_Console_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(Console* other);
  friend void swap(Console& a, Console& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Console* New() const PROTOBUF_FINAL { return New(NULL); }

  Console* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Console& from);
  void MergeFrom(const Console& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Console* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 1;
  private:
  bool has_text() const;
  public:
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // string err = 2;
  private:
  bool has_err() const;
  public:
  void clear_err();
  static const int kErrFieldNumber = 2;
  const ::std::string& err() const;
  void set_err(const ::std::string& value);
  #if LANG_CXX11
  void set_err(::std::string&& value);
  #endif
  void set_err(const char* value);
  void set_err(const char* value, size_t size);
  ::std::string* mutable_err();
  ::std::string* release_err();
  void set_allocated_err(::std::string* err);

  // string prompt = 3;
  private:
  bool has_prompt() const;
  public:
  void clear_prompt();
  static const int kPromptFieldNumber = 3;
  const ::std::string& prompt() const;
  void set_prompt(const ::std::string& value);
  #if LANG_CXX11
  void set_prompt(::std::string&& value);
  #endif
  void set_prompt(const char* value);
  void set_prompt(const char* value, size_t size);
  ::std::string* mutable_prompt();
  ::std::string* release_prompt();
  void set_allocated_prompt(::std::string* prompt);

  // .BERTBuffers.GraphicsCommand graphics = 4;
  bool has_graphics() const;
  void clear_graphics();
  static const int kGraphicsFieldNumber = 4;
  const ::BERTBuffers::GraphicsCommand& graphics() const;
  ::BERTBuffers::GraphicsCommand* release_graphics();
  ::BERTBuffers::GraphicsCommand* mutable_graphics();
  void set_allocated_graphics(::BERTBuffers::GraphicsCommand* graphics);

  // .BERTBuffers.MIMEData mime_data = 5;
  bool has_mime_data() const;
  void clear_mime_data();
  static const int kMimeDataFieldNumber = 5;
  const ::BERTBuffers::MIMEData& mime_data() const;
  ::BERTBuffers::MIMEData* release_mime_data();
  ::BERTBuffers::MIMEData* mutable_mime_data();
  void set_allocated_mime_data(::BERTBuffers::MIMEData* mime_data);

  // .BERTBuffers.Variable history = 6;
  bool has_history() const;
  void clear_history();
  static const int kHistoryFieldNumber = 6;
  const ::BERTBuffers::Variable& history() const;
  ::BERTBuffers::Variable* release_history();
  ::BERTBuffers::Variable* mutable_history();
  void set_allocated_history(::BERTBuffers::Variable* history);

  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:BERTBuffers.Console)
 private:
  void set_has_text();
  void set_has_err();
  void set_has_prompt();
  void set_has_graphics();
  void set_has_mime_data();
  void set_has_history();

  inline bool has_message() const;
  void clear_message();
  inline void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union MessageUnion {
    MessageUnion() {}
    ::google::protobuf::internal::ArenaStringPtr text_;
    ::google::protobuf::internal::ArenaStringPtr err_;
    ::google::protobuf::internal::ArenaStringPtr prompt_;
    ::BERTBuffers::GraphicsCommand* graphics_;
    ::BERTBuffers::MIMEData* mime_data_;
    ::BERTBuffers::Variable* history_;
  } message_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsConsoleImpl();
};
// -------------------------------------------------------------------

class FunctionElement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.FunctionElement) */ {
 public:
  FunctionElement();
  virtual ~FunctionElement();

  FunctionElement(const FunctionElement& from);

  inline FunctionElement& operator=(const FunctionElement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FunctionElement(FunctionElement&& from) noexcept
    : FunctionElement() {
    *this = ::std::move(from);
  }

  inline FunctionElement& operator=(FunctionElement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FunctionElement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FunctionElement* internal_default_instance() {
    return reinterpret_cast<const FunctionElement*>(
               &_FunctionElement_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(FunctionElement* other);
  friend void swap(FunctionElement& a, FunctionElement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FunctionElement* New() const PROTOBUF_FINAL { return New(NULL); }

  FunctionElement* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FunctionElement& from);
  void MergeFrom(const FunctionElement& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FunctionElement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string type_name = 2;
  void clear_type_name();
  static const int kTypeNameFieldNumber = 2;
  const ::std::string& type_name() const;
  void set_type_name(const ::std::string& value);
  #if LANG_CXX11
  void set_type_name(::std::string&& value);
  #endif
  void set_type_name(const char* value);
  void set_type_name(const char* value, size_t size);
  ::std::string* mutable_type_name();
  ::std::string* release_type_name();
  void set_allocated_type_name(::std::string* type_name);

  // string description = 4;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .BERTBuffers.Variable default_value = 3;
  bool has_default_value() const;
  void clear_default_value();
  static const int kDefaultValueFieldNumber = 3;
  const ::BERTBuffers::Variable& default_value() const;
  ::BERTBuffers::Variable* release_default_value();
  ::BERTBuffers::Variable* mutable_default_value();
  void set_allocated_default_value(::BERTBuffers::Variable* default_value);

  // uint32 index = 5;
  void clear_index();
  static const int kIndexFieldNumber = 5;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:BERTBuffers.FunctionElement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::BERTBuffers::Variable* default_value_;
  ::google::protobuf::uint32 index_;
  mutable int _cached_size_;
  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsArrayImpl();
};
// -------------------------------------------------------------------

class FunctionDescriptor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.FunctionDescriptor) */ {
 public:
  FunctionDescriptor();
  virtual ~FunctionDescriptor();

  FunctionDescriptor(const FunctionDescriptor& from);

  inline FunctionDescriptor& operator=(const FunctionDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FunctionDescriptor(FunctionDescriptor&& from) noexcept
    : FunctionDescriptor() {
    *this = ::std::move(from);
  }

  inline FunctionDescriptor& operator=(FunctionDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FunctionDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FunctionDescriptor* internal_default_instance() {
    return reinterpret_cast<const FunctionDescriptor*>(
               &_FunctionDescriptor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(FunctionDescriptor* other);
  friend void swap(FunctionDescriptor& a, FunctionDescriptor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FunctionDescriptor* New() const PROTOBUF_FINAL { return New(NULL); }

  FunctionDescriptor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FunctionDescriptor& from);
  void MergeFrom(const FunctionDescriptor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FunctionDescriptor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BERTBuffers.FunctionElement arguments = 5;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 5;
  const ::BERTBuffers::FunctionElement& arguments(int index) const;
  ::BERTBuffers::FunctionElement* mutable_arguments(int index);
  ::BERTBuffers::FunctionElement* add_arguments();
  ::google::protobuf::RepeatedPtrField< ::BERTBuffers::FunctionElement >*
      mutable_arguments();
  const ::google::protobuf::RepeatedPtrField< ::BERTBuffers::FunctionElement >&
      arguments() const;

  // string category = 4;
  void clear_category();
  static const int kCategoryFieldNumber = 4;
  const ::std::string& category() const;
  void set_category(const ::std::string& value);
  #if LANG_CXX11
  void set_category(::std::string&& value);
  #endif
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  ::std::string* mutable_category();
  ::std::string* release_category();
  void set_allocated_category(::std::string* category);

  // .BERTBuffers.FunctionElement function = 1;
  bool has_function() const;
  void clear_function();
  static const int kFunctionFieldNumber = 1;
  const ::BERTBuffers::FunctionElement& function() const;
  ::BERTBuffers::FunctionElement* release_function();
  ::BERTBuffers::FunctionElement* mutable_function();
  void set_allocated_function(::BERTBuffers::FunctionElement* function);

  // .BERTBuffers.CallType call_type = 2;
  void clear_call_type();
  static const int kCallTypeFieldNumber = 2;
  ::BERTBuffers::CallType call_type() const;
  void set_call_type(::BERTBuffers::CallType value);

  // uint32 flags = 3;
  void clear_flags();
  static const int kFlagsFieldNumber = 3;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:BERTBuffers.FunctionDescriptor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::BERTBuffers::FunctionElement > arguments_;
  ::google::protobuf::internal::ArenaStringPtr category_;
  ::BERTBuffers::FunctionElement* function_;
  int call_type_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsArrayImpl();
};
// -------------------------------------------------------------------

class FunctionList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.FunctionList) */ {
 public:
  FunctionList();
  virtual ~FunctionList();

  FunctionList(const FunctionList& from);

  inline FunctionList& operator=(const FunctionList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FunctionList(FunctionList&& from) noexcept
    : FunctionList() {
    *this = ::std::move(from);
  }

  inline FunctionList& operator=(FunctionList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FunctionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FunctionList* internal_default_instance() {
    return reinterpret_cast<const FunctionList*>(
               &_FunctionList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(FunctionList* other);
  friend void swap(FunctionList& a, FunctionList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FunctionList* New() const PROTOBUF_FINAL { return New(NULL); }

  FunctionList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FunctionList& from);
  void MergeFrom(const FunctionList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FunctionList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BERTBuffers.FunctionDescriptor functions = 1;
  int functions_size() const;
  void clear_functions();
  static const int kFunctionsFieldNumber = 1;
  const ::BERTBuffers::FunctionDescriptor& functions(int index) const;
  ::BERTBuffers::FunctionDescriptor* mutable_functions(int index);
  ::BERTBuffers::FunctionDescriptor* add_functions();
  ::google::protobuf::RepeatedPtrField< ::BERTBuffers::FunctionDescriptor >*
      mutable_functions();
  const ::google::protobuf::RepeatedPtrField< ::BERTBuffers::FunctionDescriptor >&
      functions() const;

  // @@protoc_insertion_point(class_scope:BERTBuffers.FunctionList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::BERTBuffers::FunctionDescriptor > functions_;
  mutable int _cached_size_;
  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsFunctionListImpl();
};
// -------------------------------------------------------------------

class EnumValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.EnumValue) */ {
 public:
  EnumValue();
  virtual ~EnumValue();

  EnumValue(const EnumValue& from);

  inline EnumValue& operator=(const EnumValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnumValue(EnumValue&& from) noexcept
    : EnumValue() {
    *this = ::std::move(from);
  }

  inline EnumValue& operator=(EnumValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnumValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnumValue* internal_default_instance() {
    return reinterpret_cast<const EnumValue*>(
               &_EnumValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(EnumValue* other);
  friend void swap(EnumValue& a, EnumValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnumValue* New() const PROTOBUF_FINAL { return New(NULL); }

  EnumValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnumValue& from);
  void MergeFrom(const EnumValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnumValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BERTBuffers.EnumValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 value_;
  mutable int _cached_size_;
  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsEnumValueImpl();
};
// -------------------------------------------------------------------

class EnumType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.EnumType) */ {
 public:
  EnumType();
  virtual ~EnumType();

  EnumType(const EnumType& from);

  inline EnumType& operator=(const EnumType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnumType(EnumType&& from) noexcept
    : EnumType() {
    *this = ::std::move(from);
  }

  inline EnumType& operator=(EnumType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnumType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnumType* internal_default_instance() {
    return reinterpret_cast<const EnumType*>(
               &_EnumType_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(EnumType* other);
  friend void swap(EnumType& a, EnumType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnumType* New() const PROTOBUF_FINAL { return New(NULL); }

  EnumType* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnumType& from);
  void MergeFrom(const EnumType& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnumType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BERTBuffers.EnumValue values = 2;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 2;
  const ::BERTBuffers::EnumValue& values(int index) const;
  ::BERTBuffers::EnumValue* mutable_values(int index);
  ::BERTBuffers::EnumValue* add_values();
  ::google::protobuf::RepeatedPtrField< ::BERTBuffers::EnumValue >*
      mutable_values();
  const ::google::protobuf::RepeatedPtrField< ::BERTBuffers::EnumValue >&
      values() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:BERTBuffers.EnumType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::BERTBuffers::EnumValue > values_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsEnumTypeImpl();
};
// -------------------------------------------------------------------

class ExternalPointer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.ExternalPointer) */ {
 public:
  ExternalPointer();
  virtual ~ExternalPointer();

  ExternalPointer(const ExternalPointer& from);

  inline ExternalPointer& operator=(const ExternalPointer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExternalPointer(ExternalPointer&& from) noexcept
    : ExternalPointer() {
    *this = ::std::move(from);
  }

  inline ExternalPointer& operator=(ExternalPointer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExternalPointer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExternalPointer* internal_default_instance() {
    return reinterpret_cast<const ExternalPointer*>(
               &_ExternalPointer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(ExternalPointer* other);
  friend void swap(ExternalPointer& a, ExternalPointer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExternalPointer* New() const PROTOBUF_FINAL { return New(NULL); }

  ExternalPointer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExternalPointer& from);
  void MergeFrom(const ExternalPointer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExternalPointer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BERTBuffers.FunctionDescriptor functions = 3;
  int functions_size() const;
  void clear_functions();
  static const int kFunctionsFieldNumber = 3;
  const ::BERTBuffers::FunctionDescriptor& functions(int index) const;
  ::BERTBuffers::FunctionDescriptor* mutable_functions(int index);
  ::BERTBuffers::FunctionDescriptor* add_functions();
  ::google::protobuf::RepeatedPtrField< ::BERTBuffers::FunctionDescriptor >*
      mutable_functions();
  const ::google::protobuf::RepeatedPtrField< ::BERTBuffers::FunctionDescriptor >&
      functions() const;

  // repeated .BERTBuffers.EnumType enums = 4;
  int enums_size() const;
  void clear_enums();
  static const int kEnumsFieldNumber = 4;
  const ::BERTBuffers::EnumType& enums(int index) const;
  ::BERTBuffers::EnumType* mutable_enums(int index);
  ::BERTBuffers::EnumType* add_enums();
  ::google::protobuf::RepeatedPtrField< ::BERTBuffers::EnumType >*
      mutable_enums();
  const ::google::protobuf::RepeatedPtrField< ::BERTBuffers::EnumType >&
      enums() const;

  // string interface_name = 1;
  void clear_interface_name();
  static const int kInterfaceNameFieldNumber = 1;
  const ::std::string& interface_name() const;
  void set_interface_name(const ::std::string& value);
  #if LANG_CXX11
  void set_interface_name(::std::string&& value);
  #endif
  void set_interface_name(const char* value);
  void set_interface_name(const char* value, size_t size);
  ::std::string* mutable_interface_name();
  ::std::string* release_interface_name();
  void set_allocated_interface_name(::std::string* interface_name);

  // uint64 pointer = 2;
  void clear_pointer();
  static const int kPointerFieldNumber = 2;
  ::google::protobuf::uint64 pointer() const;
  void set_pointer(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:BERTBuffers.ExternalPointer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::BERTBuffers::FunctionDescriptor > functions_;
  ::google::protobuf::RepeatedPtrField< ::BERTBuffers::EnumType > enums_;
  ::google::protobuf::internal::ArenaStringPtr interface_name_;
  ::google::protobuf::uint64 pointer_;
  mutable int _cached_size_;
  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsArrayImpl();
};
// -------------------------------------------------------------------

class CallResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.CallResponse) */ {
 public:
  CallResponse();
  virtual ~CallResponse();

  CallResponse(const CallResponse& from);

  inline CallResponse& operator=(const CallResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CallResponse(CallResponse&& from) noexcept
    : CallResponse() {
    *this = ::std::move(from);
  }

  inline CallResponse& operator=(CallResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CallResponse& default_instance();

  enum OperationCase {
    kErr = 3,
    kResult = 4,
    kConsole = 5,
    kCode = 6,
    kShellCommand = 7,
    kFunctionCall = 8,
    kFunctionList = 9,
    kUserCommand = 10,
    OPERATION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallResponse* internal_default_instance() {
    return reinterpret_cast<const CallResponse*>(
               &_CallResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(CallResponse* other);
  friend void swap(CallResponse& a, CallResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CallResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CallResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CallResponse& from);
  void MergeFrom(const CallResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CallResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // bool wait = 2;
  void clear_wait();
  static const int kWaitFieldNumber = 2;
  bool wait() const;
  void set_wait(bool value);

  // string err = 3;
  private:
  bool has_err() const;
  public:
  void clear_err();
  static const int kErrFieldNumber = 3;
  const ::std::string& err() const;
  void set_err(const ::std::string& value);
  #if LANG_CXX11
  void set_err(::std::string&& value);
  #endif
  void set_err(const char* value);
  void set_err(const char* value, size_t size);
  ::std::string* mutable_err();
  ::std::string* release_err();
  void set_allocated_err(::std::string* err);

  // .BERTBuffers.Variable result = 4;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 4;
  const ::BERTBuffers::Variable& result() const;
  ::BERTBuffers::Variable* release_result();
  ::BERTBuffers::Variable* mutable_result();
  void set_allocated_result(::BERTBuffers::Variable* result);

  // .BERTBuffers.Console console = 5;
  bool has_console() const;
  void clear_console();
  static const int kConsoleFieldNumber = 5;
  const ::BERTBuffers::Console& console() const;
  ::BERTBuffers::Console* release_console();
  ::BERTBuffers::Console* mutable_console();
  void set_allocated_console(::BERTBuffers::Console* console);

  // .BERTBuffers.Code code = 6;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 6;
  const ::BERTBuffers::Code& code() const;
  ::BERTBuffers::Code* release_code();
  ::BERTBuffers::Code* mutable_code();
  void set_allocated_code(::BERTBuffers::Code* code);

  // string shell_command = 7;
  private:
  bool has_shell_command() const;
  public:
  void clear_shell_command();
  static const int kShellCommandFieldNumber = 7;
  const ::std::string& shell_command() const;
  void set_shell_command(const ::std::string& value);
  #if LANG_CXX11
  void set_shell_command(::std::string&& value);
  #endif
  void set_shell_command(const char* value);
  void set_shell_command(const char* value, size_t size);
  ::std::string* mutable_shell_command();
  ::std::string* release_shell_command();
  void set_allocated_shell_command(::std::string* shell_command);

  // .BERTBuffers.CompositeFunctionCall function_call = 8;
  bool has_function_call() const;
  void clear_function_call();
  static const int kFunctionCallFieldNumber = 8;
  const ::BERTBuffers::CompositeFunctionCall& function_call() const;
  ::BERTBuffers::CompositeFunctionCall* release_function_call();
  ::BERTBuffers::CompositeFunctionCall* mutable_function_call();
  void set_allocated_function_call(::BERTBuffers::CompositeFunctionCall* function_call);

  // .BERTBuffers.FunctionList function_list = 9;
  bool has_function_list() const;
  void clear_function_list();
  static const int kFunctionListFieldNumber = 9;
  const ::BERTBuffers::FunctionList& function_list() const;
  ::BERTBuffers::FunctionList* release_function_list();
  ::BERTBuffers::FunctionList* mutable_function_list();
  void set_allocated_function_list(::BERTBuffers::FunctionList* function_list);

  // uint32 user_command = 10;
  private:
  bool has_user_command() const;
  public:
  void clear_user_command();
  static const int kUserCommandFieldNumber = 10;
  ::google::protobuf::uint32 user_command() const;
  void set_user_command(::google::protobuf::uint32 value);

  OperationCase operation_case() const;
  // @@protoc_insertion_point(class_scope:BERTBuffers.CallResponse)
 private:
  void set_has_err();
  void set_has_result();
  void set_has_console();
  void set_has_code();
  void set_has_shell_command();
  void set_has_function_call();
  void set_has_function_list();
  void set_has_user_command();

  inline bool has_operation() const;
  void clear_operation();
  inline void clear_has_operation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  bool wait_;
  union OperationUnion {
    OperationUnion() {}
    ::google::protobuf::internal::ArenaStringPtr err_;
    ::BERTBuffers::Variable* result_;
    ::BERTBuffers::Console* console_;
    ::BERTBuffers::Code* code_;
    ::google::protobuf::internal::ArenaStringPtr shell_command_;
    ::BERTBuffers::CompositeFunctionCall* function_call_;
    ::BERTBuffers::FunctionList* function_list_;
    ::google::protobuf::uint32 user_command_;
  } operation_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsCallResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Complex

// double r = 1;
inline void Complex::clear_r() {
  r_ = 0;
}
inline double Complex::r() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Complex.r)
  return r_;
}
inline void Complex::set_r(double value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Complex.r)
}

// double i = 2;
inline void Complex::clear_i() {
  i_ = 0;
}
inline double Complex::i() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Complex.i)
  return i_;
}
inline void Complex::set_i(double value) {
  
  i_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Complex.i)
}

// -------------------------------------------------------------------

// Array

// int32 rows = 1;
inline void Array::clear_rows() {
  rows_ = 0;
}
inline ::google::protobuf::int32 Array::rows() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Array.rows)
  return rows_;
}
inline void Array::set_rows(::google::protobuf::int32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Array.rows)
}

// int32 cols = 2;
inline void Array::clear_cols() {
  cols_ = 0;
}
inline ::google::protobuf::int32 Array::cols() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Array.cols)
  return cols_;
}
inline void Array::set_cols(::google::protobuf::int32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Array.cols)
}

// repeated .BERTBuffers.Variable data = 3;
inline int Array::data_size() const {
  return data_.size();
}
inline void Array::clear_data() {
  data_.Clear();
}
inline const ::BERTBuffers::Variable& Array::data(int index) const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Array.data)
  return data_.Get(index);
}
inline ::BERTBuffers::Variable* Array::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Array.data)
  return data_.Mutable(index);
}
inline ::BERTBuffers::Variable* Array::add_data() {
  // @@protoc_insertion_point(field_add:BERTBuffers.Array.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable >*
Array::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:BERTBuffers.Array.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable >&
Array::data() const {
  // @@protoc_insertion_point(field_list:BERTBuffers.Array.data)
  return data_;
}

// repeated string rownames = 4;
inline int Array::rownames_size() const {
  return rownames_.size();
}
inline void Array::clear_rownames() {
  rownames_.Clear();
}
inline const ::std::string& Array::rownames(int index) const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Array.rownames)
  return rownames_.Get(index);
}
inline ::std::string* Array::mutable_rownames(int index) {
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Array.rownames)
  return rownames_.Mutable(index);
}
inline void Array::set_rownames(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Array.rownames)
  rownames_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Array::set_rownames(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Array.rownames)
  rownames_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Array::set_rownames(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  rownames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BERTBuffers.Array.rownames)
}
inline void Array::set_rownames(int index, const char* value, size_t size) {
  rownames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.Array.rownames)
}
inline ::std::string* Array::add_rownames() {
  // @@protoc_insertion_point(field_add_mutable:BERTBuffers.Array.rownames)
  return rownames_.Add();
}
inline void Array::add_rownames(const ::std::string& value) {
  rownames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BERTBuffers.Array.rownames)
}
#if LANG_CXX11
inline void Array::add_rownames(::std::string&& value) {
  rownames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BERTBuffers.Array.rownames)
}
#endif
inline void Array::add_rownames(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  rownames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BERTBuffers.Array.rownames)
}
inline void Array::add_rownames(const char* value, size_t size) {
  rownames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BERTBuffers.Array.rownames)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Array::rownames() const {
  // @@protoc_insertion_point(field_list:BERTBuffers.Array.rownames)
  return rownames_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Array::mutable_rownames() {
  // @@protoc_insertion_point(field_mutable_list:BERTBuffers.Array.rownames)
  return &rownames_;
}

// repeated string colnames = 5;
inline int Array::colnames_size() const {
  return colnames_.size();
}
inline void Array::clear_colnames() {
  colnames_.Clear();
}
inline const ::std::string& Array::colnames(int index) const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Array.colnames)
  return colnames_.Get(index);
}
inline ::std::string* Array::mutable_colnames(int index) {
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Array.colnames)
  return colnames_.Mutable(index);
}
inline void Array::set_colnames(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Array.colnames)
  colnames_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Array::set_colnames(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Array.colnames)
  colnames_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Array::set_colnames(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  colnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BERTBuffers.Array.colnames)
}
inline void Array::set_colnames(int index, const char* value, size_t size) {
  colnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.Array.colnames)
}
inline ::std::string* Array::add_colnames() {
  // @@protoc_insertion_point(field_add_mutable:BERTBuffers.Array.colnames)
  return colnames_.Add();
}
inline void Array::add_colnames(const ::std::string& value) {
  colnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BERTBuffers.Array.colnames)
}
#if LANG_CXX11
inline void Array::add_colnames(::std::string&& value) {
  colnames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BERTBuffers.Array.colnames)
}
#endif
inline void Array::add_colnames(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  colnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BERTBuffers.Array.colnames)
}
inline void Array::add_colnames(const char* value, size_t size) {
  colnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BERTBuffers.Array.colnames)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Array::colnames() const {
  // @@protoc_insertion_point(field_list:BERTBuffers.Array.colnames)
  return colnames_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Array::mutable_colnames() {
  // @@protoc_insertion_point(field_mutable_list:BERTBuffers.Array.colnames)
  return &colnames_;
}

// -------------------------------------------------------------------

// Error

// .BERTBuffers.ErrorType type = 1;
inline void Error::clear_type() {
  type_ = 0;
}
inline ::BERTBuffers::ErrorType Error::type() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Error.type)
  return static_cast< ::BERTBuffers::ErrorType >(type_);
}
inline void Error::set_type(::BERTBuffers::ErrorType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Error.type)
}

// string message = 2;
inline void Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Error.message)
  return message_.GetNoArena();
}
inline void Error::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.Error.message)
}
#if LANG_CXX11
inline void Error::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.Error.message)
}
#endif
inline void Error::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.Error.message)
}
inline void Error::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.Error.message)
}
inline ::std::string* Error::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Error.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.Error.message)
}

// -------------------------------------------------------------------

// SheetReference

// uint32 start_row = 1;
inline void SheetReference::clear_start_row() {
  start_row_ = 0u;
}
inline ::google::protobuf::uint32 SheetReference::start_row() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.SheetReference.start_row)
  return start_row_;
}
inline void SheetReference::set_start_row(::google::protobuf::uint32 value) {
  
  start_row_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.SheetReference.start_row)
}

// uint32 start_column = 2;
inline void SheetReference::clear_start_column() {
  start_column_ = 0u;
}
inline ::google::protobuf::uint32 SheetReference::start_column() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.SheetReference.start_column)
  return start_column_;
}
inline void SheetReference::set_start_column(::google::protobuf::uint32 value) {
  
  start_column_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.SheetReference.start_column)
}

// uint32 end_row = 3;
inline void SheetReference::clear_end_row() {
  end_row_ = 0u;
}
inline ::google::protobuf::uint32 SheetReference::end_row() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.SheetReference.end_row)
  return end_row_;
}
inline void SheetReference::set_end_row(::google::protobuf::uint32 value) {
  
  end_row_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.SheetReference.end_row)
}

// uint32 end_column = 4;
inline void SheetReference::clear_end_column() {
  end_column_ = 0u;
}
inline ::google::protobuf::uint32 SheetReference::end_column() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.SheetReference.end_column)
  return end_column_;
}
inline void SheetReference::set_end_column(::google::protobuf::uint32 value) {
  
  end_column_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.SheetReference.end_column)
}

// uint64 sheet_id = 5;
inline void SheetReference::clear_sheet_id() {
  sheet_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SheetReference::sheet_id() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.SheetReference.sheet_id)
  return sheet_id_;
}
inline void SheetReference::set_sheet_id(::google::protobuf::uint64 value) {
  
  sheet_id_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.SheetReference.sheet_id)
}

// -------------------------------------------------------------------

// Variable

// bool nil = 1;
inline bool Variable::has_nil() const {
  return value_case() == kNil;
}
inline void Variable::set_has_nil() {
  _oneof_case_[0] = kNil;
}
inline void Variable::clear_nil() {
  if (has_nil()) {
    value_.nil_ = false;
    clear_has_value();
  }
}
inline bool Variable::nil() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.nil)
  if (has_nil()) {
    return value_.nil_;
  }
  return false;
}
inline void Variable::set_nil(bool value) {
  if (!has_nil()) {
    clear_value();
    set_has_nil();
  }
  value_.nil_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Variable.nil)
}

// bool missing = 2;
inline bool Variable::has_missing() const {
  return value_case() == kMissing;
}
inline void Variable::set_has_missing() {
  _oneof_case_[0] = kMissing;
}
inline void Variable::clear_missing() {
  if (has_missing()) {
    value_.missing_ = false;
    clear_has_value();
  }
}
inline bool Variable::missing() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.missing)
  if (has_missing()) {
    return value_.missing_;
  }
  return false;
}
inline void Variable::set_missing(bool value) {
  if (!has_missing()) {
    clear_value();
    set_has_missing();
  }
  value_.missing_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Variable.missing)
}

// .BERTBuffers.Error err = 3;
inline bool Variable::has_err() const {
  return value_case() == kErr;
}
inline void Variable::set_has_err() {
  _oneof_case_[0] = kErr;
}
inline void Variable::clear_err() {
  if (has_err()) {
    delete value_.err_;
    clear_has_value();
  }
}
inline ::BERTBuffers::Error* Variable::release_err() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Variable.err)
  if (has_err()) {
    clear_has_value();
      ::BERTBuffers::Error* temp = value_.err_;
    value_.err_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::Error& Variable::err() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.err)
  return has_err()
      ? *value_.err_
      : *reinterpret_cast< ::BERTBuffers::Error*>(&::BERTBuffers::_Error_default_instance_);
}
inline ::BERTBuffers::Error* Variable::mutable_err() {
  if (!has_err()) {
    clear_value();
    set_has_err();
    value_.err_ = new ::BERTBuffers::Error;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Variable.err)
  return value_.err_;
}

// int32 integer = 5;
inline bool Variable::has_integer() const {
  return value_case() == kInteger;
}
inline void Variable::set_has_integer() {
  _oneof_case_[0] = kInteger;
}
inline void Variable::clear_integer() {
  if (has_integer()) {
    value_.integer_ = 0;
    clear_has_value();
  }
}
inline ::google::protobuf::int32 Variable::integer() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.integer)
  if (has_integer()) {
    return value_.integer_;
  }
  return 0;
}
inline void Variable::set_integer(::google::protobuf::int32 value) {
  if (!has_integer()) {
    clear_value();
    set_has_integer();
  }
  value_.integer_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Variable.integer)
}

// double real = 6;
inline bool Variable::has_real() const {
  return value_case() == kReal;
}
inline void Variable::set_has_real() {
  _oneof_case_[0] = kReal;
}
inline void Variable::clear_real() {
  if (has_real()) {
    value_.real_ = 0;
    clear_has_value();
  }
}
inline double Variable::real() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.real)
  if (has_real()) {
    return value_.real_;
  }
  return 0;
}
inline void Variable::set_real(double value) {
  if (!has_real()) {
    clear_value();
    set_has_real();
  }
  value_.real_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Variable.real)
}

// string str = 7;
inline bool Variable::has_str() const {
  return value_case() == kStr;
}
inline void Variable::set_has_str() {
  _oneof_case_[0] = kStr;
}
inline void Variable::clear_str() {
  if (has_str()) {
    value_.str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& Variable::str() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.str)
  if (has_str()) {
    return value_.str_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Variable::set_str(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Variable.str)
  if (!has_str()) {
    clear_value();
    set_has_str();
    value_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.Variable.str)
}
#if LANG_CXX11
inline void Variable::set_str(::std::string&& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Variable.str)
  if (!has_str()) {
    clear_value();
    set_has_str();
    value_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.Variable.str)
}
#endif
inline void Variable::set_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_str()) {
    clear_value();
    set_has_str();
    value_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.Variable.str)
}
inline void Variable::set_str(const char* value, size_t size) {
  if (!has_str()) {
    clear_value();
    set_has_str();
    value_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.Variable.str)
}
inline ::std::string* Variable::mutable_str() {
  if (!has_str()) {
    clear_value();
    set_has_str();
    value_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Variable.str)
  return value_.str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Variable::release_str() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Variable.str)
  if (has_str()) {
    clear_has_value();
    return value_.str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Variable::set_allocated_str(::std::string* str) {
  if (!has_str()) {
    value_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (str != NULL) {
    set_has_str();
    value_.str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        str);
  }
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.Variable.str)
}

// bool boolean = 8;
inline bool Variable::has_boolean() const {
  return value_case() == kBoolean;
}
inline void Variable::set_has_boolean() {
  _oneof_case_[0] = kBoolean;
}
inline void Variable::clear_boolean() {
  if (has_boolean()) {
    value_.boolean_ = false;
    clear_has_value();
  }
}
inline bool Variable::boolean() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.boolean)
  if (has_boolean()) {
    return value_.boolean_;
  }
  return false;
}
inline void Variable::set_boolean(bool value) {
  if (!has_boolean()) {
    clear_value();
    set_has_boolean();
  }
  value_.boolean_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Variable.boolean)
}

// .BERTBuffers.Complex cpx = 9;
inline bool Variable::has_cpx() const {
  return value_case() == kCpx;
}
inline void Variable::set_has_cpx() {
  _oneof_case_[0] = kCpx;
}
inline void Variable::clear_cpx() {
  if (has_cpx()) {
    delete value_.cpx_;
    clear_has_value();
  }
}
inline ::BERTBuffers::Complex* Variable::release_cpx() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Variable.cpx)
  if (has_cpx()) {
    clear_has_value();
      ::BERTBuffers::Complex* temp = value_.cpx_;
    value_.cpx_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::Complex& Variable::cpx() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.cpx)
  return has_cpx()
      ? *value_.cpx_
      : *reinterpret_cast< ::BERTBuffers::Complex*>(&::BERTBuffers::_Complex_default_instance_);
}
inline ::BERTBuffers::Complex* Variable::mutable_cpx() {
  if (!has_cpx()) {
    clear_value();
    set_has_cpx();
    value_.cpx_ = new ::BERTBuffers::Complex;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Variable.cpx)
  return value_.cpx_;
}

// .BERTBuffers.Array arr = 10;
inline bool Variable::has_arr() const {
  return value_case() == kArr;
}
inline void Variable::set_has_arr() {
  _oneof_case_[0] = kArr;
}
inline void Variable::clear_arr() {
  if (has_arr()) {
    delete value_.arr_;
    clear_has_value();
  }
}
inline ::BERTBuffers::Array* Variable::release_arr() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Variable.arr)
  if (has_arr()) {
    clear_has_value();
      ::BERTBuffers::Array* temp = value_.arr_;
    value_.arr_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::Array& Variable::arr() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.arr)
  return has_arr()
      ? *value_.arr_
      : *reinterpret_cast< ::BERTBuffers::Array*>(&::BERTBuffers::_Array_default_instance_);
}
inline ::BERTBuffers::Array* Variable::mutable_arr() {
  if (!has_arr()) {
    clear_value();
    set_has_arr();
    value_.arr_ = new ::BERTBuffers::Array;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Variable.arr)
  return value_.arr_;
}

// .BERTBuffers.SheetReference ref = 11;
inline bool Variable::has_ref() const {
  return value_case() == kRef;
}
inline void Variable::set_has_ref() {
  _oneof_case_[0] = kRef;
}
inline void Variable::clear_ref() {
  if (has_ref()) {
    delete value_.ref_;
    clear_has_value();
  }
}
inline ::BERTBuffers::SheetReference* Variable::release_ref() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Variable.ref)
  if (has_ref()) {
    clear_has_value();
      ::BERTBuffers::SheetReference* temp = value_.ref_;
    value_.ref_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::SheetReference& Variable::ref() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.ref)
  return has_ref()
      ? *value_.ref_
      : *reinterpret_cast< ::BERTBuffers::SheetReference*>(&::BERTBuffers::_SheetReference_default_instance_);
}
inline ::BERTBuffers::SheetReference* Variable::mutable_ref() {
  if (!has_ref()) {
    clear_value();
    set_has_ref();
    value_.ref_ = new ::BERTBuffers::SheetReference;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Variable.ref)
  return value_.ref_;
}

// .BERTBuffers.ExternalPointer com_pointer = 12;
inline bool Variable::has_com_pointer() const {
  return value_case() == kComPointer;
}
inline void Variable::set_has_com_pointer() {
  _oneof_case_[0] = kComPointer;
}
inline void Variable::clear_com_pointer() {
  if (has_com_pointer()) {
    delete value_.com_pointer_;
    clear_has_value();
  }
}
inline ::BERTBuffers::ExternalPointer* Variable::release_com_pointer() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Variable.com_pointer)
  if (has_com_pointer()) {
    clear_has_value();
      ::BERTBuffers::ExternalPointer* temp = value_.com_pointer_;
    value_.com_pointer_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::ExternalPointer& Variable::com_pointer() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.com_pointer)
  return has_com_pointer()
      ? *value_.com_pointer_
      : *reinterpret_cast< ::BERTBuffers::ExternalPointer*>(&::BERTBuffers::_ExternalPointer_default_instance_);
}
inline ::BERTBuffers::ExternalPointer* Variable::mutable_com_pointer() {
  if (!has_com_pointer()) {
    clear_value();
    set_has_com_pointer();
    value_.com_pointer_ = new ::BERTBuffers::ExternalPointer;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Variable.com_pointer)
  return value_.com_pointer_;
}

// .BERTBuffers.GraphicsUpdate graphics = 13;
inline bool Variable::has_graphics() const {
  return value_case() == kGraphics;
}
inline void Variable::set_has_graphics() {
  _oneof_case_[0] = kGraphics;
}
inline void Variable::clear_graphics() {
  if (has_graphics()) {
    delete value_.graphics_;
    clear_has_value();
  }
}
inline ::BERTBuffers::GraphicsUpdate* Variable::release_graphics() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Variable.graphics)
  if (has_graphics()) {
    clear_has_value();
      ::BERTBuffers::GraphicsUpdate* temp = value_.graphics_;
    value_.graphics_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::GraphicsUpdate& Variable::graphics() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.graphics)
  return has_graphics()
      ? *value_.graphics_
      : *reinterpret_cast< ::BERTBuffers::GraphicsUpdate*>(&::BERTBuffers::_GraphicsUpdate_default_instance_);
}
inline ::BERTBuffers::GraphicsUpdate* Variable::mutable_graphics() {
  if (!has_graphics()) {
    clear_value();
    set_has_graphics();
    value_.graphics_ = new ::BERTBuffers::GraphicsUpdate;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Variable.graphics)
  return value_.graphics_;
}

// uint32 cache_reference = 14;
inline bool Variable::has_cache_reference() const {
  return value_case() == kCacheReference;
}
inline void Variable::set_has_cache_reference() {
  _oneof_case_[0] = kCacheReference;
}
inline void Variable::clear_cache_reference() {
  if (has_cache_reference()) {
    value_.cache_reference_ = 0u;
    clear_has_value();
  }
}
inline ::google::protobuf::uint32 Variable::cache_reference() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.cache_reference)
  if (has_cache_reference()) {
    return value_.cache_reference_;
  }
  return 0u;
}
inline void Variable::set_cache_reference(::google::protobuf::uint32 value) {
  if (!has_cache_reference()) {
    clear_value();
    set_has_cache_reference();
  }
  value_.cache_reference_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Variable.cache_reference)
}

// string name = 15;
inline void Variable::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Variable::name() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.name)
  return name_.GetNoArena();
}
inline void Variable::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.Variable.name)
}
#if LANG_CXX11
inline void Variable::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.Variable.name)
}
#endif
inline void Variable::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.Variable.name)
}
inline void Variable::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.Variable.name)
}
inline ::std::string* Variable::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Variable.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Variable::release_name() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Variable.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Variable::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.Variable.name)
}

inline bool Variable::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Variable::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Variable::ValueCase Variable::value_case() const {
  return Variable::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Code

// repeated string line = 1;
inline int Code::line_size() const {
  return line_.size();
}
inline void Code::clear_line() {
  line_.Clear();
}
inline const ::std::string& Code::line(int index) const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Code.line)
  return line_.Get(index);
}
inline ::std::string* Code::mutable_line(int index) {
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Code.line)
  return line_.Mutable(index);
}
inline void Code::set_line(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Code.line)
  line_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Code::set_line(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Code.line)
  line_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Code::set_line(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  line_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BERTBuffers.Code.line)
}
inline void Code::set_line(int index, const char* value, size_t size) {
  line_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.Code.line)
}
inline ::std::string* Code::add_line() {
  // @@protoc_insertion_point(field_add_mutable:BERTBuffers.Code.line)
  return line_.Add();
}
inline void Code::add_line(const ::std::string& value) {
  line_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BERTBuffers.Code.line)
}
#if LANG_CXX11
inline void Code::add_line(::std::string&& value) {
  line_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BERTBuffers.Code.line)
}
#endif
inline void Code::add_line(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  line_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BERTBuffers.Code.line)
}
inline void Code::add_line(const char* value, size_t size) {
  line_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BERTBuffers.Code.line)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Code::line() const {
  // @@protoc_insertion_point(field_list:BERTBuffers.Code.line)
  return line_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Code::mutable_line() {
  // @@protoc_insertion_point(field_mutable_list:BERTBuffers.Code.line)
  return &line_;
}

// bool startup = 2;
inline void Code::clear_startup() {
  startup_ = false;
}
inline bool Code::startup() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Code.startup)
  return startup_;
}
inline void Code::set_startup(bool value) {
  
  startup_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Code.startup)
}

// -------------------------------------------------------------------

// CompositeFunctionCall

// string function = 1;
inline void CompositeFunctionCall::clear_function() {
  function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CompositeFunctionCall::function() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.CompositeFunctionCall.function)
  return function_.GetNoArena();
}
inline void CompositeFunctionCall::set_function(const ::std::string& value) {
  
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.CompositeFunctionCall.function)
}
#if LANG_CXX11
inline void CompositeFunctionCall::set_function(::std::string&& value) {
  
  function_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.CompositeFunctionCall.function)
}
#endif
inline void CompositeFunctionCall::set_function(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.CompositeFunctionCall.function)
}
inline void CompositeFunctionCall::set_function(const char* value, size_t size) {
  
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.CompositeFunctionCall.function)
}
inline ::std::string* CompositeFunctionCall::mutable_function() {
  
  // @@protoc_insertion_point(field_mutable:BERTBuffers.CompositeFunctionCall.function)
  return function_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompositeFunctionCall::release_function() {
  // @@protoc_insertion_point(field_release:BERTBuffers.CompositeFunctionCall.function)
  
  return function_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompositeFunctionCall::set_allocated_function(::std::string* function) {
  if (function != NULL) {
    
  } else {
    
  }
  function_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function);
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.CompositeFunctionCall.function)
}

// repeated .BERTBuffers.Variable arguments = 2;
inline int CompositeFunctionCall::arguments_size() const {
  return arguments_.size();
}
inline void CompositeFunctionCall::clear_arguments() {
  arguments_.Clear();
}
inline const ::BERTBuffers::Variable& CompositeFunctionCall::arguments(int index) const {
  // @@protoc_insertion_point(field_get:BERTBuffers.CompositeFunctionCall.arguments)
  return arguments_.Get(index);
}
inline ::BERTBuffers::Variable* CompositeFunctionCall::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:BERTBuffers.CompositeFunctionCall.arguments)
  return arguments_.Mutable(index);
}
inline ::BERTBuffers::Variable* CompositeFunctionCall::add_arguments() {
  // @@protoc_insertion_point(field_add:BERTBuffers.CompositeFunctionCall.arguments)
  return arguments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable >*
CompositeFunctionCall::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:BERTBuffers.CompositeFunctionCall.arguments)
  return &arguments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable >&
CompositeFunctionCall::arguments() const {
  // @@protoc_insertion_point(field_list:BERTBuffers.CompositeFunctionCall.arguments)
  return arguments_;
}

// uint64 pointer = 3;
inline void CompositeFunctionCall::clear_pointer() {
  pointer_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CompositeFunctionCall::pointer() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.CompositeFunctionCall.pointer)
  return pointer_;
}
inline void CompositeFunctionCall::set_pointer(::google::protobuf::uint64 value) {
  
  pointer_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.CompositeFunctionCall.pointer)
}

// uint32 index = 4;
inline void CompositeFunctionCall::clear_index() {
  index_ = 0u;
}
inline ::google::protobuf::uint32 CompositeFunctionCall::index() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.CompositeFunctionCall.index)
  return index_;
}
inline void CompositeFunctionCall::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.CompositeFunctionCall.index)
}

// .BERTBuffers.CallType type = 5;
inline void CompositeFunctionCall::clear_type() {
  type_ = 0;
}
inline ::BERTBuffers::CallType CompositeFunctionCall::type() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.CompositeFunctionCall.type)
  return static_cast< ::BERTBuffers::CallType >(type_);
}
inline void CompositeFunctionCall::set_type(::BERTBuffers::CallType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.CompositeFunctionCall.type)
}

// .BERTBuffers.CallTarget target = 6;
inline void CompositeFunctionCall::clear_target() {
  target_ = 0;
}
inline ::BERTBuffers::CallTarget CompositeFunctionCall::target() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.CompositeFunctionCall.target)
  return static_cast< ::BERTBuffers::CallTarget >(target_);
}
inline void CompositeFunctionCall::set_target(::BERTBuffers::CallTarget value) {
  
  target_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.CompositeFunctionCall.target)
}

// uint32 flags = 7;
inline void CompositeFunctionCall::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 CompositeFunctionCall::flags() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.CompositeFunctionCall.flags)
  return flags_;
}
inline void CompositeFunctionCall::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.CompositeFunctionCall.flags)
}

// -------------------------------------------------------------------

// GraphicsUpdate

// .BERTBuffers.GraphicsUpdateCommand command = 1;
inline void GraphicsUpdate::clear_command() {
  command_ = 0;
}
inline ::BERTBuffers::GraphicsUpdateCommand GraphicsUpdate::command() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsUpdate.command)
  return static_cast< ::BERTBuffers::GraphicsUpdateCommand >(command_);
}
inline void GraphicsUpdate::set_command(::BERTBuffers::GraphicsUpdateCommand value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsUpdate.command)
}

// string name = 2;
inline void GraphicsUpdate::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GraphicsUpdate::name() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsUpdate.name)
  return name_.GetNoArena();
}
inline void GraphicsUpdate::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsUpdate.name)
}
#if LANG_CXX11
inline void GraphicsUpdate::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.GraphicsUpdate.name)
}
#endif
inline void GraphicsUpdate::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.GraphicsUpdate.name)
}
inline void GraphicsUpdate::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.GraphicsUpdate.name)
}
inline ::std::string* GraphicsUpdate::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:BERTBuffers.GraphicsUpdate.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GraphicsUpdate::release_name() {
  // @@protoc_insertion_point(field_release:BERTBuffers.GraphicsUpdate.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphicsUpdate::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.GraphicsUpdate.name)
}

// string path = 3;
inline void GraphicsUpdate::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GraphicsUpdate::path() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsUpdate.path)
  return path_.GetNoArena();
}
inline void GraphicsUpdate::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsUpdate.path)
}
#if LANG_CXX11
inline void GraphicsUpdate::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.GraphicsUpdate.path)
}
#endif
inline void GraphicsUpdate::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.GraphicsUpdate.path)
}
inline void GraphicsUpdate::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.GraphicsUpdate.path)
}
inline ::std::string* GraphicsUpdate::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:BERTBuffers.GraphicsUpdate.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GraphicsUpdate::release_path() {
  // @@protoc_insertion_point(field_release:BERTBuffers.GraphicsUpdate.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphicsUpdate::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.GraphicsUpdate.path)
}

// uint32 width = 4;
inline void GraphicsUpdate::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 GraphicsUpdate::width() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsUpdate.width)
  return width_;
}
inline void GraphicsUpdate::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsUpdate.width)
}

// uint32 height = 5;
inline void GraphicsUpdate::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 GraphicsUpdate::height() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsUpdate.height)
  return height_;
}
inline void GraphicsUpdate::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsUpdate.height)
}

// -------------------------------------------------------------------

// GraphicsCommand

// string command = 1;
inline void GraphicsCommand::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GraphicsCommand::command() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsCommand.command)
  return command_.GetNoArena();
}
inline void GraphicsCommand::set_command(const ::std::string& value) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsCommand.command)
}
#if LANG_CXX11
inline void GraphicsCommand::set_command(::std::string&& value) {
  
  command_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.GraphicsCommand.command)
}
#endif
inline void GraphicsCommand::set_command(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.GraphicsCommand.command)
}
inline void GraphicsCommand::set_command(const char* value, size_t size) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.GraphicsCommand.command)
}
inline ::std::string* GraphicsCommand::mutable_command() {
  
  // @@protoc_insertion_point(field_mutable:BERTBuffers.GraphicsCommand.command)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GraphicsCommand::release_command() {
  // @@protoc_insertion_point(field_release:BERTBuffers.GraphicsCommand.command)
  
  return command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphicsCommand::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    
  } else {
    
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.GraphicsCommand.command)
}

// repeated double x = 2;
inline int GraphicsCommand::x_size() const {
  return x_.size();
}
inline void GraphicsCommand::clear_x() {
  x_.Clear();
}
inline double GraphicsCommand::x(int index) const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsCommand.x)
  return x_.Get(index);
}
inline void GraphicsCommand::set_x(int index, double value) {
  x_.Set(index, value);
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsCommand.x)
}
inline void GraphicsCommand::add_x(double value) {
  x_.Add(value);
  // @@protoc_insertion_point(field_add:BERTBuffers.GraphicsCommand.x)
}
inline const ::google::protobuf::RepeatedField< double >&
GraphicsCommand::x() const {
  // @@protoc_insertion_point(field_list:BERTBuffers.GraphicsCommand.x)
  return x_;
}
inline ::google::protobuf::RepeatedField< double >*
GraphicsCommand::mutable_x() {
  // @@protoc_insertion_point(field_mutable_list:BERTBuffers.GraphicsCommand.x)
  return &x_;
}

// repeated double y = 3;
inline int GraphicsCommand::y_size() const {
  return y_.size();
}
inline void GraphicsCommand::clear_y() {
  y_.Clear();
}
inline double GraphicsCommand::y(int index) const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsCommand.y)
  return y_.Get(index);
}
inline void GraphicsCommand::set_y(int index, double value) {
  y_.Set(index, value);
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsCommand.y)
}
inline void GraphicsCommand::add_y(double value) {
  y_.Add(value);
  // @@protoc_insertion_point(field_add:BERTBuffers.GraphicsCommand.y)
}
inline const ::google::protobuf::RepeatedField< double >&
GraphicsCommand::y() const {
  // @@protoc_insertion_point(field_list:BERTBuffers.GraphicsCommand.y)
  return y_;
}
inline ::google::protobuf::RepeatedField< double >*
GraphicsCommand::mutable_y() {
  // @@protoc_insertion_point(field_mutable_list:BERTBuffers.GraphicsCommand.y)
  return &y_;
}

// double r = 4;
inline void GraphicsCommand::clear_r() {
  r_ = 0;
}
inline double GraphicsCommand::r() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsCommand.r)
  return r_;
}
inline void GraphicsCommand::set_r(double value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsCommand.r)
}

// double rot = 5;
inline void GraphicsCommand::clear_rot() {
  rot_ = 0;
}
inline double GraphicsCommand::rot() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsCommand.rot)
  return rot_;
}
inline void GraphicsCommand::set_rot(double value) {
  
  rot_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsCommand.rot)
}

// string text = 6;
inline void GraphicsCommand::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GraphicsCommand::text() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsCommand.text)
  return text_.GetNoArena();
}
inline void GraphicsCommand::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsCommand.text)
}
#if LANG_CXX11
inline void GraphicsCommand::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.GraphicsCommand.text)
}
#endif
inline void GraphicsCommand::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.GraphicsCommand.text)
}
inline void GraphicsCommand::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.GraphicsCommand.text)
}
inline ::std::string* GraphicsCommand::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:BERTBuffers.GraphicsCommand.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GraphicsCommand::release_text() {
  // @@protoc_insertion_point(field_release:BERTBuffers.GraphicsCommand.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphicsCommand::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.GraphicsCommand.text)
}

// bool filled = 7;
inline void GraphicsCommand::clear_filled() {
  filled_ = false;
}
inline bool GraphicsCommand::filled() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsCommand.filled)
  return filled_;
}
inline void GraphicsCommand::set_filled(bool value) {
  
  filled_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsCommand.filled)
}

// double hadj = 8;
inline void GraphicsCommand::clear_hadj() {
  hadj_ = 0;
}
inline double GraphicsCommand::hadj() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsCommand.hadj)
  return hadj_;
}
inline void GraphicsCommand::set_hadj(double value) {
  
  hadj_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsCommand.hadj)
}

// bytes raster = 9;
inline void GraphicsCommand::clear_raster() {
  raster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GraphicsCommand::raster() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsCommand.raster)
  return raster_.GetNoArena();
}
inline void GraphicsCommand::set_raster(const ::std::string& value) {
  
  raster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsCommand.raster)
}
#if LANG_CXX11
inline void GraphicsCommand::set_raster(::std::string&& value) {
  
  raster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.GraphicsCommand.raster)
}
#endif
inline void GraphicsCommand::set_raster(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  raster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.GraphicsCommand.raster)
}
inline void GraphicsCommand::set_raster(const void* value, size_t size) {
  
  raster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.GraphicsCommand.raster)
}
inline ::std::string* GraphicsCommand::mutable_raster() {
  
  // @@protoc_insertion_point(field_mutable:BERTBuffers.GraphicsCommand.raster)
  return raster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GraphicsCommand::release_raster() {
  // @@protoc_insertion_point(field_release:BERTBuffers.GraphicsCommand.raster)
  
  return raster_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphicsCommand::set_allocated_raster(::std::string* raster) {
  if (raster != NULL) {
    
  } else {
    
  }
  raster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raster);
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.GraphicsCommand.raster)
}

// bool interpolate = 10;
inline void GraphicsCommand::clear_interpolate() {
  interpolate_ = false;
}
inline bool GraphicsCommand::interpolate() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsCommand.interpolate)
  return interpolate_;
}
inline void GraphicsCommand::set_interpolate(bool value) {
  
  interpolate_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsCommand.interpolate)
}

// string device_type = 14;
inline void GraphicsCommand::clear_device_type() {
  device_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GraphicsCommand::device_type() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsCommand.device_type)
  return device_type_.GetNoArena();
}
inline void GraphicsCommand::set_device_type(const ::std::string& value) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsCommand.device_type)
}
#if LANG_CXX11
inline void GraphicsCommand::set_device_type(::std::string&& value) {
  
  device_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.GraphicsCommand.device_type)
}
#endif
inline void GraphicsCommand::set_device_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.GraphicsCommand.device_type)
}
inline void GraphicsCommand::set_device_type(const char* value, size_t size) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.GraphicsCommand.device_type)
}
inline ::std::string* GraphicsCommand::mutable_device_type() {
  
  // @@protoc_insertion_point(field_mutable:BERTBuffers.GraphicsCommand.device_type)
  return device_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GraphicsCommand::release_device_type() {
  // @@protoc_insertion_point(field_release:BERTBuffers.GraphicsCommand.device_type)
  
  return device_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphicsCommand::set_allocated_device_type(::std::string* device_type) {
  if (device_type != NULL) {
    
  } else {
    
  }
  device_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_type);
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.GraphicsCommand.device_type)
}

// .BERTBuffers.GraphicsContext context = 15;
inline bool GraphicsCommand::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
inline void GraphicsCommand::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) {
    delete context_;
  }
  context_ = NULL;
}
inline const ::BERTBuffers::GraphicsContext& GraphicsCommand::context() const {
  const ::BERTBuffers::GraphicsContext* p = context_;
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsCommand.context)
  return p != NULL ? *p : *reinterpret_cast<const ::BERTBuffers::GraphicsContext*>(
      &::BERTBuffers::_GraphicsContext_default_instance_);
}
inline ::BERTBuffers::GraphicsContext* GraphicsCommand::release_context() {
  // @@protoc_insertion_point(field_release:BERTBuffers.GraphicsCommand.context)
  
  ::BERTBuffers::GraphicsContext* temp = context_;
  context_ = NULL;
  return temp;
}
inline ::BERTBuffers::GraphicsContext* GraphicsCommand::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::BERTBuffers::GraphicsContext;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.GraphicsCommand.context)
  return context_;
}
inline void GraphicsCommand::set_allocated_context(::BERTBuffers::GraphicsContext* context) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete context_;
  }
  if (context) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      context = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.GraphicsCommand.context)
}

// -------------------------------------------------------------------

// Color

// uint32 a = 1;
inline void Color::clear_a() {
  a_ = 0u;
}
inline ::google::protobuf::uint32 Color::a() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Color.a)
  return a_;
}
inline void Color::set_a(::google::protobuf::uint32 value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Color.a)
}

// uint32 r = 2;
inline void Color::clear_r() {
  r_ = 0u;
}
inline ::google::protobuf::uint32 Color::r() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Color.r)
  return r_;
}
inline void Color::set_r(::google::protobuf::uint32 value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Color.r)
}

// uint32 g = 3;
inline void Color::clear_g() {
  g_ = 0u;
}
inline ::google::protobuf::uint32 Color::g() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Color.g)
  return g_;
}
inline void Color::set_g(::google::protobuf::uint32 value) {
  
  g_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Color.g)
}

// uint32 b = 4;
inline void Color::clear_b() {
  b_ = 0u;
}
inline ::google::protobuf::uint32 Color::b() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Color.b)
  return b_;
}
inline void Color::set_b(::google::protobuf::uint32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Color.b)
}

// -------------------------------------------------------------------

// GraphicsContext

// .BERTBuffers.Color col = 1;
inline bool GraphicsContext::has_col() const {
  return this != internal_default_instance() && col_ != NULL;
}
inline void GraphicsContext::clear_col() {
  if (GetArenaNoVirtual() == NULL && col_ != NULL) {
    delete col_;
  }
  col_ = NULL;
}
inline const ::BERTBuffers::Color& GraphicsContext::col() const {
  const ::BERTBuffers::Color* p = col_;
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsContext.col)
  return p != NULL ? *p : *reinterpret_cast<const ::BERTBuffers::Color*>(
      &::BERTBuffers::_Color_default_instance_);
}
inline ::BERTBuffers::Color* GraphicsContext::release_col() {
  // @@protoc_insertion_point(field_release:BERTBuffers.GraphicsContext.col)
  
  ::BERTBuffers::Color* temp = col_;
  col_ = NULL;
  return temp;
}
inline ::BERTBuffers::Color* GraphicsContext::mutable_col() {
  
  if (col_ == NULL) {
    col_ = new ::BERTBuffers::Color;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.GraphicsContext.col)
  return col_;
}
inline void GraphicsContext::set_allocated_col(::BERTBuffers::Color* col) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete col_;
  }
  if (col) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      col = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, col, submessage_arena);
    }
    
  } else {
    
  }
  col_ = col;
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.GraphicsContext.col)
}

// .BERTBuffers.Color fill = 2;
inline bool GraphicsContext::has_fill() const {
  return this != internal_default_instance() && fill_ != NULL;
}
inline void GraphicsContext::clear_fill() {
  if (GetArenaNoVirtual() == NULL && fill_ != NULL) {
    delete fill_;
  }
  fill_ = NULL;
}
inline const ::BERTBuffers::Color& GraphicsContext::fill() const {
  const ::BERTBuffers::Color* p = fill_;
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsContext.fill)
  return p != NULL ? *p : *reinterpret_cast<const ::BERTBuffers::Color*>(
      &::BERTBuffers::_Color_default_instance_);
}
inline ::BERTBuffers::Color* GraphicsContext::release_fill() {
  // @@protoc_insertion_point(field_release:BERTBuffers.GraphicsContext.fill)
  
  ::BERTBuffers::Color* temp = fill_;
  fill_ = NULL;
  return temp;
}
inline ::BERTBuffers::Color* GraphicsContext::mutable_fill() {
  
  if (fill_ == NULL) {
    fill_ = new ::BERTBuffers::Color;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.GraphicsContext.fill)
  return fill_;
}
inline void GraphicsContext::set_allocated_fill(::BERTBuffers::Color* fill) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fill_;
  }
  if (fill) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fill = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fill, submessage_arena);
    }
    
  } else {
    
  }
  fill_ = fill;
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.GraphicsContext.fill)
}

// double gamma = 3;
inline void GraphicsContext::clear_gamma() {
  gamma_ = 0;
}
inline double GraphicsContext::gamma() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsContext.gamma)
  return gamma_;
}
inline void GraphicsContext::set_gamma(double value) {
  
  gamma_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsContext.gamma)
}

// double lwd = 4;
inline void GraphicsContext::clear_lwd() {
  lwd_ = 0;
}
inline double GraphicsContext::lwd() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsContext.lwd)
  return lwd_;
}
inline void GraphicsContext::set_lwd(double value) {
  
  lwd_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsContext.lwd)
}

// int32 lty = 5;
inline void GraphicsContext::clear_lty() {
  lty_ = 0;
}
inline ::google::protobuf::int32 GraphicsContext::lty() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsContext.lty)
  return lty_;
}
inline void GraphicsContext::set_lty(::google::protobuf::int32 value) {
  
  lty_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsContext.lty)
}

// int32 lend = 6;
inline void GraphicsContext::clear_lend() {
  lend_ = 0;
}
inline ::google::protobuf::int32 GraphicsContext::lend() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsContext.lend)
  return lend_;
}
inline void GraphicsContext::set_lend(::google::protobuf::int32 value) {
  
  lend_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsContext.lend)
}

// int32 ljoin = 7;
inline void GraphicsContext::clear_ljoin() {
  ljoin_ = 0;
}
inline ::google::protobuf::int32 GraphicsContext::ljoin() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsContext.ljoin)
  return ljoin_;
}
inline void GraphicsContext::set_ljoin(::google::protobuf::int32 value) {
  
  ljoin_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsContext.ljoin)
}

// double lmitre = 8;
inline void GraphicsContext::clear_lmitre() {
  lmitre_ = 0;
}
inline double GraphicsContext::lmitre() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsContext.lmitre)
  return lmitre_;
}
inline void GraphicsContext::set_lmitre(double value) {
  
  lmitre_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsContext.lmitre)
}

// double cex = 9;
inline void GraphicsContext::clear_cex() {
  cex_ = 0;
}
inline double GraphicsContext::cex() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsContext.cex)
  return cex_;
}
inline void GraphicsContext::set_cex(double value) {
  
  cex_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsContext.cex)
}

// double ps = 10;
inline void GraphicsContext::clear_ps() {
  ps_ = 0;
}
inline double GraphicsContext::ps() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsContext.ps)
  return ps_;
}
inline void GraphicsContext::set_ps(double value) {
  
  ps_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsContext.ps)
}

// double lineheight = 11;
inline void GraphicsContext::clear_lineheight() {
  lineheight_ = 0;
}
inline double GraphicsContext::lineheight() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsContext.lineheight)
  return lineheight_;
}
inline void GraphicsContext::set_lineheight(double value) {
  
  lineheight_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsContext.lineheight)
}

// int32 fontface = 12;
inline void GraphicsContext::clear_fontface() {
  fontface_ = 0;
}
inline ::google::protobuf::int32 GraphicsContext::fontface() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsContext.fontface)
  return fontface_;
}
inline void GraphicsContext::set_fontface(::google::protobuf::int32 value) {
  
  fontface_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsContext.fontface)
}

// string fontfamily = 13;
inline void GraphicsContext::clear_fontfamily() {
  fontfamily_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GraphicsContext::fontfamily() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.GraphicsContext.fontfamily)
  return fontfamily_.GetNoArena();
}
inline void GraphicsContext::set_fontfamily(const ::std::string& value) {
  
  fontfamily_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.GraphicsContext.fontfamily)
}
#if LANG_CXX11
inline void GraphicsContext::set_fontfamily(::std::string&& value) {
  
  fontfamily_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.GraphicsContext.fontfamily)
}
#endif
inline void GraphicsContext::set_fontfamily(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fontfamily_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.GraphicsContext.fontfamily)
}
inline void GraphicsContext::set_fontfamily(const char* value, size_t size) {
  
  fontfamily_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.GraphicsContext.fontfamily)
}
inline ::std::string* GraphicsContext::mutable_fontfamily() {
  
  // @@protoc_insertion_point(field_mutable:BERTBuffers.GraphicsContext.fontfamily)
  return fontfamily_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GraphicsContext::release_fontfamily() {
  // @@protoc_insertion_point(field_release:BERTBuffers.GraphicsContext.fontfamily)
  
  return fontfamily_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphicsContext::set_allocated_fontfamily(::std::string* fontfamily) {
  if (fontfamily != NULL) {
    
  } else {
    
  }
  fontfamily_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fontfamily);
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.GraphicsContext.fontfamily)
}

// -------------------------------------------------------------------

// MIMEData

// string mime_type = 1;
inline void MIMEData::clear_mime_type() {
  mime_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MIMEData::mime_type() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.MIMEData.mime_type)
  return mime_type_.GetNoArena();
}
inline void MIMEData::set_mime_type(const ::std::string& value) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.MIMEData.mime_type)
}
#if LANG_CXX11
inline void MIMEData::set_mime_type(::std::string&& value) {
  
  mime_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.MIMEData.mime_type)
}
#endif
inline void MIMEData::set_mime_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.MIMEData.mime_type)
}
inline void MIMEData::set_mime_type(const char* value, size_t size) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.MIMEData.mime_type)
}
inline ::std::string* MIMEData::mutable_mime_type() {
  
  // @@protoc_insertion_point(field_mutable:BERTBuffers.MIMEData.mime_type)
  return mime_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MIMEData::release_mime_type() {
  // @@protoc_insertion_point(field_release:BERTBuffers.MIMEData.mime_type)
  
  return mime_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MIMEData::set_allocated_mime_type(::std::string* mime_type) {
  if (mime_type != NULL) {
    
  } else {
    
  }
  mime_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mime_type);
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.MIMEData.mime_type)
}

// bytes data = 2;
inline void MIMEData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MIMEData::data() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.MIMEData.data)
  return data_.GetNoArena();
}
inline void MIMEData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.MIMEData.data)
}
#if LANG_CXX11
inline void MIMEData::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.MIMEData.data)
}
#endif
inline void MIMEData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.MIMEData.data)
}
inline void MIMEData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.MIMEData.data)
}
inline ::std::string* MIMEData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:BERTBuffers.MIMEData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MIMEData::release_data() {
  // @@protoc_insertion_point(field_release:BERTBuffers.MIMEData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MIMEData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.MIMEData.data)
}

// -------------------------------------------------------------------

// Console

// string text = 1;
inline bool Console::has_text() const {
  return message_case() == kText;
}
inline void Console::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void Console::clear_text() {
  if (has_text()) {
    message_.text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_message();
  }
}
inline const ::std::string& Console::text() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Console.text)
  if (has_text()) {
    return message_.text_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Console::set_text(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Console.text)
  if (!has_text()) {
    clear_message();
    set_has_text();
    message_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.Console.text)
}
#if LANG_CXX11
inline void Console::set_text(::std::string&& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Console.text)
  if (!has_text()) {
    clear_message();
    set_has_text();
    message_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.Console.text)
}
#endif
inline void Console::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_text()) {
    clear_message();
    set_has_text();
    message_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.Console.text)
}
inline void Console::set_text(const char* value, size_t size) {
  if (!has_text()) {
    clear_message();
    set_has_text();
    message_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.Console.text)
}
inline ::std::string* Console::mutable_text() {
  if (!has_text()) {
    clear_message();
    set_has_text();
    message_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Console.text)
  return message_.text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Console::release_text() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Console.text)
  if (has_text()) {
    clear_has_message();
    return message_.text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Console::set_allocated_text(::std::string* text) {
  if (!has_text()) {
    message_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_message();
  if (text != NULL) {
    set_has_text();
    message_.text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        text);
  }
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.Console.text)
}

// string err = 2;
inline bool Console::has_err() const {
  return message_case() == kErr;
}
inline void Console::set_has_err() {
  _oneof_case_[0] = kErr;
}
inline void Console::clear_err() {
  if (has_err()) {
    message_.err_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_message();
  }
}
inline const ::std::string& Console::err() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Console.err)
  if (has_err()) {
    return message_.err_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Console::set_err(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Console.err)
  if (!has_err()) {
    clear_message();
    set_has_err();
    message_.err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.Console.err)
}
#if LANG_CXX11
inline void Console::set_err(::std::string&& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Console.err)
  if (!has_err()) {
    clear_message();
    set_has_err();
    message_.err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.err_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.Console.err)
}
#endif
inline void Console::set_err(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_err()) {
    clear_message();
    set_has_err();
    message_.err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.Console.err)
}
inline void Console::set_err(const char* value, size_t size) {
  if (!has_err()) {
    clear_message();
    set_has_err();
    message_.err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.Console.err)
}
inline ::std::string* Console::mutable_err() {
  if (!has_err()) {
    clear_message();
    set_has_err();
    message_.err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Console.err)
  return message_.err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Console::release_err() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Console.err)
  if (has_err()) {
    clear_has_message();
    return message_.err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Console::set_allocated_err(::std::string* err) {
  if (!has_err()) {
    message_.err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_message();
  if (err != NULL) {
    set_has_err();
    message_.err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        err);
  }
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.Console.err)
}

// string prompt = 3;
inline bool Console::has_prompt() const {
  return message_case() == kPrompt;
}
inline void Console::set_has_prompt() {
  _oneof_case_[0] = kPrompt;
}
inline void Console::clear_prompt() {
  if (has_prompt()) {
    message_.prompt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_message();
  }
}
inline const ::std::string& Console::prompt() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Console.prompt)
  if (has_prompt()) {
    return message_.prompt_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Console::set_prompt(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Console.prompt)
  if (!has_prompt()) {
    clear_message();
    set_has_prompt();
    message_.prompt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.prompt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.Console.prompt)
}
#if LANG_CXX11
inline void Console::set_prompt(::std::string&& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Console.prompt)
  if (!has_prompt()) {
    clear_message();
    set_has_prompt();
    message_.prompt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.prompt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.Console.prompt)
}
#endif
inline void Console::set_prompt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_prompt()) {
    clear_message();
    set_has_prompt();
    message_.prompt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.prompt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.Console.prompt)
}
inline void Console::set_prompt(const char* value, size_t size) {
  if (!has_prompt()) {
    clear_message();
    set_has_prompt();
    message_.prompt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.prompt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.Console.prompt)
}
inline ::std::string* Console::mutable_prompt() {
  if (!has_prompt()) {
    clear_message();
    set_has_prompt();
    message_.prompt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Console.prompt)
  return message_.prompt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Console::release_prompt() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Console.prompt)
  if (has_prompt()) {
    clear_has_message();
    return message_.prompt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Console::set_allocated_prompt(::std::string* prompt) {
  if (!has_prompt()) {
    message_.prompt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_message();
  if (prompt != NULL) {
    set_has_prompt();
    message_.prompt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        prompt);
  }
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.Console.prompt)
}

// .BERTBuffers.GraphicsCommand graphics = 4;
inline bool Console::has_graphics() const {
  return message_case() == kGraphics;
}
inline void Console::set_has_graphics() {
  _oneof_case_[0] = kGraphics;
}
inline void Console::clear_graphics() {
  if (has_graphics()) {
    delete message_.graphics_;
    clear_has_message();
  }
}
inline ::BERTBuffers::GraphicsCommand* Console::release_graphics() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Console.graphics)
  if (has_graphics()) {
    clear_has_message();
      ::BERTBuffers::GraphicsCommand* temp = message_.graphics_;
    message_.graphics_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::GraphicsCommand& Console::graphics() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Console.graphics)
  return has_graphics()
      ? *message_.graphics_
      : *reinterpret_cast< ::BERTBuffers::GraphicsCommand*>(&::BERTBuffers::_GraphicsCommand_default_instance_);
}
inline ::BERTBuffers::GraphicsCommand* Console::mutable_graphics() {
  if (!has_graphics()) {
    clear_message();
    set_has_graphics();
    message_.graphics_ = new ::BERTBuffers::GraphicsCommand;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Console.graphics)
  return message_.graphics_;
}

// .BERTBuffers.MIMEData mime_data = 5;
inline bool Console::has_mime_data() const {
  return message_case() == kMimeData;
}
inline void Console::set_has_mime_data() {
  _oneof_case_[0] = kMimeData;
}
inline void Console::clear_mime_data() {
  if (has_mime_data()) {
    delete message_.mime_data_;
    clear_has_message();
  }
}
inline ::BERTBuffers::MIMEData* Console::release_mime_data() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Console.mime_data)
  if (has_mime_data()) {
    clear_has_message();
      ::BERTBuffers::MIMEData* temp = message_.mime_data_;
    message_.mime_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::MIMEData& Console::mime_data() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Console.mime_data)
  return has_mime_data()
      ? *message_.mime_data_
      : *reinterpret_cast< ::BERTBuffers::MIMEData*>(&::BERTBuffers::_MIMEData_default_instance_);
}
inline ::BERTBuffers::MIMEData* Console::mutable_mime_data() {
  if (!has_mime_data()) {
    clear_message();
    set_has_mime_data();
    message_.mime_data_ = new ::BERTBuffers::MIMEData;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Console.mime_data)
  return message_.mime_data_;
}

// .BERTBuffers.Variable history = 6;
inline bool Console::has_history() const {
  return message_case() == kHistory;
}
inline void Console::set_has_history() {
  _oneof_case_[0] = kHistory;
}
inline void Console::clear_history() {
  if (has_history()) {
    delete message_.history_;
    clear_has_message();
  }
}
inline ::BERTBuffers::Variable* Console::release_history() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Console.history)
  if (has_history()) {
    clear_has_message();
      ::BERTBuffers::Variable* temp = message_.history_;
    message_.history_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::Variable& Console::history() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Console.history)
  return has_history()
      ? *message_.history_
      : *reinterpret_cast< ::BERTBuffers::Variable*>(&::BERTBuffers::_Variable_default_instance_);
}
inline ::BERTBuffers::Variable* Console::mutable_history() {
  if (!has_history()) {
    clear_message();
    set_has_history();
    message_.history_ = new ::BERTBuffers::Variable;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Console.history)
  return message_.history_;
}

inline bool Console::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Console::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Console::MessageCase Console::message_case() const {
  return Console::MessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FunctionElement

// string name = 1;
inline void FunctionElement::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FunctionElement::name() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.FunctionElement.name)
  return name_.GetNoArena();
}
inline void FunctionElement::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.FunctionElement.name)
}
#if LANG_CXX11
inline void FunctionElement::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.FunctionElement.name)
}
#endif
inline void FunctionElement::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.FunctionElement.name)
}
inline void FunctionElement::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.FunctionElement.name)
}
inline ::std::string* FunctionElement::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:BERTBuffers.FunctionElement.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FunctionElement::release_name() {
  // @@protoc_insertion_point(field_release:BERTBuffers.FunctionElement.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FunctionElement::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.FunctionElement.name)
}

// string type_name = 2;
inline void FunctionElement::clear_type_name() {
  type_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FunctionElement::type_name() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.FunctionElement.type_name)
  return type_name_.GetNoArena();
}
inline void FunctionElement::set_type_name(const ::std::string& value) {
  
  type_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.FunctionElement.type_name)
}
#if LANG_CXX11
inline void FunctionElement::set_type_name(::std::string&& value) {
  
  type_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.FunctionElement.type_name)
}
#endif
inline void FunctionElement::set_type_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.FunctionElement.type_name)
}
inline void FunctionElement::set_type_name(const char* value, size_t size) {
  
  type_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.FunctionElement.type_name)
}
inline ::std::string* FunctionElement::mutable_type_name() {
  
  // @@protoc_insertion_point(field_mutable:BERTBuffers.FunctionElement.type_name)
  return type_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FunctionElement::release_type_name() {
  // @@protoc_insertion_point(field_release:BERTBuffers.FunctionElement.type_name)
  
  return type_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FunctionElement::set_allocated_type_name(::std::string* type_name) {
  if (type_name != NULL) {
    
  } else {
    
  }
  type_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_name);
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.FunctionElement.type_name)
}

// .BERTBuffers.Variable default_value = 3;
inline bool FunctionElement::has_default_value() const {
  return this != internal_default_instance() && default_value_ != NULL;
}
inline void FunctionElement::clear_default_value() {
  if (GetArenaNoVirtual() == NULL && default_value_ != NULL) {
    delete default_value_;
  }
  default_value_ = NULL;
}
inline const ::BERTBuffers::Variable& FunctionElement::default_value() const {
  const ::BERTBuffers::Variable* p = default_value_;
  // @@protoc_insertion_point(field_get:BERTBuffers.FunctionElement.default_value)
  return p != NULL ? *p : *reinterpret_cast<const ::BERTBuffers::Variable*>(
      &::BERTBuffers::_Variable_default_instance_);
}
inline ::BERTBuffers::Variable* FunctionElement::release_default_value() {
  // @@protoc_insertion_point(field_release:BERTBuffers.FunctionElement.default_value)
  
  ::BERTBuffers::Variable* temp = default_value_;
  default_value_ = NULL;
  return temp;
}
inline ::BERTBuffers::Variable* FunctionElement::mutable_default_value() {
  
  if (default_value_ == NULL) {
    default_value_ = new ::BERTBuffers::Variable;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.FunctionElement.default_value)
  return default_value_;
}
inline void FunctionElement::set_allocated_default_value(::BERTBuffers::Variable* default_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete default_value_;
  }
  if (default_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      default_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, default_value, submessage_arena);
    }
    
  } else {
    
  }
  default_value_ = default_value;
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.FunctionElement.default_value)
}

// string description = 4;
inline void FunctionElement::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FunctionElement::description() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.FunctionElement.description)
  return description_.GetNoArena();
}
inline void FunctionElement::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.FunctionElement.description)
}
#if LANG_CXX11
inline void FunctionElement::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.FunctionElement.description)
}
#endif
inline void FunctionElement::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.FunctionElement.description)
}
inline void FunctionElement::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.FunctionElement.description)
}
inline ::std::string* FunctionElement::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:BERTBuffers.FunctionElement.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FunctionElement::release_description() {
  // @@protoc_insertion_point(field_release:BERTBuffers.FunctionElement.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FunctionElement::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.FunctionElement.description)
}

// uint32 index = 5;
inline void FunctionElement::clear_index() {
  index_ = 0u;
}
inline ::google::protobuf::uint32 FunctionElement::index() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.FunctionElement.index)
  return index_;
}
inline void FunctionElement::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.FunctionElement.index)
}

// -------------------------------------------------------------------

// FunctionDescriptor

// .BERTBuffers.FunctionElement function = 1;
inline bool FunctionDescriptor::has_function() const {
  return this != internal_default_instance() && function_ != NULL;
}
inline void FunctionDescriptor::clear_function() {
  if (GetArenaNoVirtual() == NULL && function_ != NULL) {
    delete function_;
  }
  function_ = NULL;
}
inline const ::BERTBuffers::FunctionElement& FunctionDescriptor::function() const {
  const ::BERTBuffers::FunctionElement* p = function_;
  // @@protoc_insertion_point(field_get:BERTBuffers.FunctionDescriptor.function)
  return p != NULL ? *p : *reinterpret_cast<const ::BERTBuffers::FunctionElement*>(
      &::BERTBuffers::_FunctionElement_default_instance_);
}
inline ::BERTBuffers::FunctionElement* FunctionDescriptor::release_function() {
  // @@protoc_insertion_point(field_release:BERTBuffers.FunctionDescriptor.function)
  
  ::BERTBuffers::FunctionElement* temp = function_;
  function_ = NULL;
  return temp;
}
inline ::BERTBuffers::FunctionElement* FunctionDescriptor::mutable_function() {
  
  if (function_ == NULL) {
    function_ = new ::BERTBuffers::FunctionElement;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.FunctionDescriptor.function)
  return function_;
}
inline void FunctionDescriptor::set_allocated_function(::BERTBuffers::FunctionElement* function) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete function_;
  }
  if (function) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      function = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, function, submessage_arena);
    }
    
  } else {
    
  }
  function_ = function;
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.FunctionDescriptor.function)
}

// .BERTBuffers.CallType call_type = 2;
inline void FunctionDescriptor::clear_call_type() {
  call_type_ = 0;
}
inline ::BERTBuffers::CallType FunctionDescriptor::call_type() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.FunctionDescriptor.call_type)
  return static_cast< ::BERTBuffers::CallType >(call_type_);
}
inline void FunctionDescriptor::set_call_type(::BERTBuffers::CallType value) {
  
  call_type_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.FunctionDescriptor.call_type)
}

// uint32 flags = 3;
inline void FunctionDescriptor::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 FunctionDescriptor::flags() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.FunctionDescriptor.flags)
  return flags_;
}
inline void FunctionDescriptor::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.FunctionDescriptor.flags)
}

// string category = 4;
inline void FunctionDescriptor::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FunctionDescriptor::category() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.FunctionDescriptor.category)
  return category_.GetNoArena();
}
inline void FunctionDescriptor::set_category(const ::std::string& value) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.FunctionDescriptor.category)
}
#if LANG_CXX11
inline void FunctionDescriptor::set_category(::std::string&& value) {
  
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.FunctionDescriptor.category)
}
#endif
inline void FunctionDescriptor::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.FunctionDescriptor.category)
}
inline void FunctionDescriptor::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.FunctionDescriptor.category)
}
inline ::std::string* FunctionDescriptor::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:BERTBuffers.FunctionDescriptor.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FunctionDescriptor::release_category() {
  // @@protoc_insertion_point(field_release:BERTBuffers.FunctionDescriptor.category)
  
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FunctionDescriptor::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.FunctionDescriptor.category)
}

// repeated .BERTBuffers.FunctionElement arguments = 5;
inline int FunctionDescriptor::arguments_size() const {
  return arguments_.size();
}
inline void FunctionDescriptor::clear_arguments() {
  arguments_.Clear();
}
inline const ::BERTBuffers::FunctionElement& FunctionDescriptor::arguments(int index) const {
  // @@protoc_insertion_point(field_get:BERTBuffers.FunctionDescriptor.arguments)
  return arguments_.Get(index);
}
inline ::BERTBuffers::FunctionElement* FunctionDescriptor::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:BERTBuffers.FunctionDescriptor.arguments)
  return arguments_.Mutable(index);
}
inline ::BERTBuffers::FunctionElement* FunctionDescriptor::add_arguments() {
  // @@protoc_insertion_point(field_add:BERTBuffers.FunctionDescriptor.arguments)
  return arguments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BERTBuffers::FunctionElement >*
FunctionDescriptor::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:BERTBuffers.FunctionDescriptor.arguments)
  return &arguments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BERTBuffers::FunctionElement >&
FunctionDescriptor::arguments() const {
  // @@protoc_insertion_point(field_list:BERTBuffers.FunctionDescriptor.arguments)
  return arguments_;
}

// -------------------------------------------------------------------

// FunctionList

// repeated .BERTBuffers.FunctionDescriptor functions = 1;
inline int FunctionList::functions_size() const {
  return functions_.size();
}
inline void FunctionList::clear_functions() {
  functions_.Clear();
}
inline const ::BERTBuffers::FunctionDescriptor& FunctionList::functions(int index) const {
  // @@protoc_insertion_point(field_get:BERTBuffers.FunctionList.functions)
  return functions_.Get(index);
}
inline ::BERTBuffers::FunctionDescriptor* FunctionList::mutable_functions(int index) {
  // @@protoc_insertion_point(field_mutable:BERTBuffers.FunctionList.functions)
  return functions_.Mutable(index);
}
inline ::BERTBuffers::FunctionDescriptor* FunctionList::add_functions() {
  // @@protoc_insertion_point(field_add:BERTBuffers.FunctionList.functions)
  return functions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BERTBuffers::FunctionDescriptor >*
FunctionList::mutable_functions() {
  // @@protoc_insertion_point(field_mutable_list:BERTBuffers.FunctionList.functions)
  return &functions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BERTBuffers::FunctionDescriptor >&
FunctionList::functions() const {
  // @@protoc_insertion_point(field_list:BERTBuffers.FunctionList.functions)
  return functions_;
}

// -------------------------------------------------------------------

// EnumValue

// string name = 1;
inline void EnumValue::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnumValue::name() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.EnumValue.name)
  return name_.GetNoArena();
}
inline void EnumValue::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.EnumValue.name)
}
#if LANG_CXX11
inline void EnumValue::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.EnumValue.name)
}
#endif
inline void EnumValue::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.EnumValue.name)
}
inline void EnumValue::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.EnumValue.name)
}
inline ::std::string* EnumValue::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:BERTBuffers.EnumValue.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnumValue::release_name() {
  // @@protoc_insertion_point(field_release:BERTBuffers.EnumValue.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnumValue::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.EnumValue.name)
}

// int32 value = 2;
inline void EnumValue::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 EnumValue::value() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.EnumValue.value)
  return value_;
}
inline void EnumValue::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.EnumValue.value)
}

// -------------------------------------------------------------------

// EnumType

// string name = 1;
inline void EnumType::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnumType::name() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.EnumType.name)
  return name_.GetNoArena();
}
inline void EnumType::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.EnumType.name)
}
#if LANG_CXX11
inline void EnumType::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.EnumType.name)
}
#endif
inline void EnumType::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.EnumType.name)
}
inline void EnumType::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.EnumType.name)
}
inline ::std::string* EnumType::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:BERTBuffers.EnumType.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnumType::release_name() {
  // @@protoc_insertion_point(field_release:BERTBuffers.EnumType.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnumType::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.EnumType.name)
}

// repeated .BERTBuffers.EnumValue values = 2;
inline int EnumType::values_size() const {
  return values_.size();
}
inline void EnumType::clear_values() {
  values_.Clear();
}
inline const ::BERTBuffers::EnumValue& EnumType::values(int index) const {
  // @@protoc_insertion_point(field_get:BERTBuffers.EnumType.values)
  return values_.Get(index);
}
inline ::BERTBuffers::EnumValue* EnumType::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:BERTBuffers.EnumType.values)
  return values_.Mutable(index);
}
inline ::BERTBuffers::EnumValue* EnumType::add_values() {
  // @@protoc_insertion_point(field_add:BERTBuffers.EnumType.values)
  return values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BERTBuffers::EnumValue >*
EnumType::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:BERTBuffers.EnumType.values)
  return &values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BERTBuffers::EnumValue >&
EnumType::values() const {
  // @@protoc_insertion_point(field_list:BERTBuffers.EnumType.values)
  return values_;
}

// -------------------------------------------------------------------

// ExternalPointer

// string interface_name = 1;
inline void ExternalPointer::clear_interface_name() {
  interface_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalPointer::interface_name() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.ExternalPointer.interface_name)
  return interface_name_.GetNoArena();
}
inline void ExternalPointer::set_interface_name(const ::std::string& value) {
  
  interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.ExternalPointer.interface_name)
}
#if LANG_CXX11
inline void ExternalPointer::set_interface_name(::std::string&& value) {
  
  interface_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.ExternalPointer.interface_name)
}
#endif
inline void ExternalPointer::set_interface_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.ExternalPointer.interface_name)
}
inline void ExternalPointer::set_interface_name(const char* value, size_t size) {
  
  interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.ExternalPointer.interface_name)
}
inline ::std::string* ExternalPointer::mutable_interface_name() {
  
  // @@protoc_insertion_point(field_mutable:BERTBuffers.ExternalPointer.interface_name)
  return interface_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalPointer::release_interface_name() {
  // @@protoc_insertion_point(field_release:BERTBuffers.ExternalPointer.interface_name)
  
  return interface_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalPointer::set_allocated_interface_name(::std::string* interface_name) {
  if (interface_name != NULL) {
    
  } else {
    
  }
  interface_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interface_name);
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.ExternalPointer.interface_name)
}

// uint64 pointer = 2;
inline void ExternalPointer::clear_pointer() {
  pointer_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ExternalPointer::pointer() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.ExternalPointer.pointer)
  return pointer_;
}
inline void ExternalPointer::set_pointer(::google::protobuf::uint64 value) {
  
  pointer_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.ExternalPointer.pointer)
}

// repeated .BERTBuffers.FunctionDescriptor functions = 3;
inline int ExternalPointer::functions_size() const {
  return functions_.size();
}
inline void ExternalPointer::clear_functions() {
  functions_.Clear();
}
inline const ::BERTBuffers::FunctionDescriptor& ExternalPointer::functions(int index) const {
  // @@protoc_insertion_point(field_get:BERTBuffers.ExternalPointer.functions)
  return functions_.Get(index);
}
inline ::BERTBuffers::FunctionDescriptor* ExternalPointer::mutable_functions(int index) {
  // @@protoc_insertion_point(field_mutable:BERTBuffers.ExternalPointer.functions)
  return functions_.Mutable(index);
}
inline ::BERTBuffers::FunctionDescriptor* ExternalPointer::add_functions() {
  // @@protoc_insertion_point(field_add:BERTBuffers.ExternalPointer.functions)
  return functions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BERTBuffers::FunctionDescriptor >*
ExternalPointer::mutable_functions() {
  // @@protoc_insertion_point(field_mutable_list:BERTBuffers.ExternalPointer.functions)
  return &functions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BERTBuffers::FunctionDescriptor >&
ExternalPointer::functions() const {
  // @@protoc_insertion_point(field_list:BERTBuffers.ExternalPointer.functions)
  return functions_;
}

// repeated .BERTBuffers.EnumType enums = 4;
inline int ExternalPointer::enums_size() const {
  return enums_.size();
}
inline void ExternalPointer::clear_enums() {
  enums_.Clear();
}
inline const ::BERTBuffers::EnumType& ExternalPointer::enums(int index) const {
  // @@protoc_insertion_point(field_get:BERTBuffers.ExternalPointer.enums)
  return enums_.Get(index);
}
inline ::BERTBuffers::EnumType* ExternalPointer::mutable_enums(int index) {
  // @@protoc_insertion_point(field_mutable:BERTBuffers.ExternalPointer.enums)
  return enums_.Mutable(index);
}
inline ::BERTBuffers::EnumType* ExternalPointer::add_enums() {
  // @@protoc_insertion_point(field_add:BERTBuffers.ExternalPointer.enums)
  return enums_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BERTBuffers::EnumType >*
ExternalPointer::mutable_enums() {
  // @@protoc_insertion_point(field_mutable_list:BERTBuffers.ExternalPointer.enums)
  return &enums_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BERTBuffers::EnumType >&
ExternalPointer::enums() const {
  // @@protoc_insertion_point(field_list:BERTBuffers.ExternalPointer.enums)
  return enums_;
}

// -------------------------------------------------------------------

// CallResponse

// uint32 id = 1;
inline void CallResponse::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 CallResponse::id() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.CallResponse.id)
  return id_;
}
inline void CallResponse::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.CallResponse.id)
}

// bool wait = 2;
inline void CallResponse::clear_wait() {
  wait_ = false;
}
inline bool CallResponse::wait() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.CallResponse.wait)
  return wait_;
}
inline void CallResponse::set_wait(bool value) {
  
  wait_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.CallResponse.wait)
}

// string err = 3;
inline bool CallResponse::has_err() const {
  return operation_case() == kErr;
}
inline void CallResponse::set_has_err() {
  _oneof_case_[0] = kErr;
}
inline void CallResponse::clear_err() {
  if (has_err()) {
    operation_.err_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_operation();
  }
}
inline const ::std::string& CallResponse::err() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.CallResponse.err)
  if (has_err()) {
    return operation_.err_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CallResponse::set_err(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.CallResponse.err)
  if (!has_err()) {
    clear_operation();
    set_has_err();
    operation_.err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  operation_.err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.CallResponse.err)
}
#if LANG_CXX11
inline void CallResponse::set_err(::std::string&& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.CallResponse.err)
  if (!has_err()) {
    clear_operation();
    set_has_err();
    operation_.err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  operation_.err_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.CallResponse.err)
}
#endif
inline void CallResponse::set_err(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_err()) {
    clear_operation();
    set_has_err();
    operation_.err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  operation_.err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.CallResponse.err)
}
inline void CallResponse::set_err(const char* value, size_t size) {
  if (!has_err()) {
    clear_operation();
    set_has_err();
    operation_.err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  operation_.err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.CallResponse.err)
}
inline ::std::string* CallResponse::mutable_err() {
  if (!has_err()) {
    clear_operation();
    set_has_err();
    operation_.err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.CallResponse.err)
  return operation_.err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallResponse::release_err() {
  // @@protoc_insertion_point(field_release:BERTBuffers.CallResponse.err)
  if (has_err()) {
    clear_has_operation();
    return operation_.err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CallResponse::set_allocated_err(::std::string* err) {
  if (!has_err()) {
    operation_.err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_operation();
  if (err != NULL) {
    set_has_err();
    operation_.err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        err);
  }
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.CallResponse.err)
}

// .BERTBuffers.Variable result = 4;
inline bool CallResponse::has_result() const {
  return operation_case() == kResult;
}
inline void CallResponse::set_has_result() {
  _oneof_case_[0] = kResult;
}
inline void CallResponse::clear_result() {
  if (has_result()) {
    delete operation_.result_;
    clear_has_operation();
  }
}
inline ::BERTBuffers::Variable* CallResponse::release_result() {
  // @@protoc_insertion_point(field_release:BERTBuffers.CallResponse.result)
  if (has_result()) {
    clear_has_operation();
      ::BERTBuffers::Variable* temp = operation_.result_;
    operation_.result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::Variable& CallResponse::result() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.CallResponse.result)
  return has_result()
      ? *operation_.result_
      : *reinterpret_cast< ::BERTBuffers::Variable*>(&::BERTBuffers::_Variable_default_instance_);
}
inline ::BERTBuffers::Variable* CallResponse::mutable_result() {
  if (!has_result()) {
    clear_operation();
    set_has_result();
    operation_.result_ = new ::BERTBuffers::Variable;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.CallResponse.result)
  return operation_.result_;
}

// .BERTBuffers.Console console = 5;
inline bool CallResponse::has_console() const {
  return operation_case() == kConsole;
}
inline void CallResponse::set_has_console() {
  _oneof_case_[0] = kConsole;
}
inline void CallResponse::clear_console() {
  if (has_console()) {
    delete operation_.console_;
    clear_has_operation();
  }
}
inline ::BERTBuffers::Console* CallResponse::release_console() {
  // @@protoc_insertion_point(field_release:BERTBuffers.CallResponse.console)
  if (has_console()) {
    clear_has_operation();
      ::BERTBuffers::Console* temp = operation_.console_;
    operation_.console_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::Console& CallResponse::console() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.CallResponse.console)
  return has_console()
      ? *operation_.console_
      : *reinterpret_cast< ::BERTBuffers::Console*>(&::BERTBuffers::_Console_default_instance_);
}
inline ::BERTBuffers::Console* CallResponse::mutable_console() {
  if (!has_console()) {
    clear_operation();
    set_has_console();
    operation_.console_ = new ::BERTBuffers::Console;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.CallResponse.console)
  return operation_.console_;
}

// .BERTBuffers.Code code = 6;
inline bool CallResponse::has_code() const {
  return operation_case() == kCode;
}
inline void CallResponse::set_has_code() {
  _oneof_case_[0] = kCode;
}
inline void CallResponse::clear_code() {
  if (has_code()) {
    delete operation_.code_;
    clear_has_operation();
  }
}
inline ::BERTBuffers::Code* CallResponse::release_code() {
  // @@protoc_insertion_point(field_release:BERTBuffers.CallResponse.code)
  if (has_code()) {
    clear_has_operation();
      ::BERTBuffers::Code* temp = operation_.code_;
    operation_.code_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::Code& CallResponse::code() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.CallResponse.code)
  return has_code()
      ? *operation_.code_
      : *reinterpret_cast< ::BERTBuffers::Code*>(&::BERTBuffers::_Code_default_instance_);
}
inline ::BERTBuffers::Code* CallResponse::mutable_code() {
  if (!has_code()) {
    clear_operation();
    set_has_code();
    operation_.code_ = new ::BERTBuffers::Code;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.CallResponse.code)
  return operation_.code_;
}

// string shell_command = 7;
inline bool CallResponse::has_shell_command() const {
  return operation_case() == kShellCommand;
}
inline void CallResponse::set_has_shell_command() {
  _oneof_case_[0] = kShellCommand;
}
inline void CallResponse::clear_shell_command() {
  if (has_shell_command()) {
    operation_.shell_command_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_operation();
  }
}
inline const ::std::string& CallResponse::shell_command() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.CallResponse.shell_command)
  if (has_shell_command()) {
    return operation_.shell_command_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CallResponse::set_shell_command(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.CallResponse.shell_command)
  if (!has_shell_command()) {
    clear_operation();
    set_has_shell_command();
    operation_.shell_command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  operation_.shell_command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.CallResponse.shell_command)
}
#if LANG_CXX11
inline void CallResponse::set_shell_command(::std::string&& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.CallResponse.shell_command)
  if (!has_shell_command()) {
    clear_operation();
    set_has_shell_command();
    operation_.shell_command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  operation_.shell_command_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.CallResponse.shell_command)
}
#endif
inline void CallResponse::set_shell_command(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_shell_command()) {
    clear_operation();
    set_has_shell_command();
    operation_.shell_command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  operation_.shell_command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.CallResponse.shell_command)
}
inline void CallResponse::set_shell_command(const char* value, size_t size) {
  if (!has_shell_command()) {
    clear_operation();
    set_has_shell_command();
    operation_.shell_command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  operation_.shell_command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.CallResponse.shell_command)
}
inline ::std::string* CallResponse::mutable_shell_command() {
  if (!has_shell_command()) {
    clear_operation();
    set_has_shell_command();
    operation_.shell_command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.CallResponse.shell_command)
  return operation_.shell_command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallResponse::release_shell_command() {
  // @@protoc_insertion_point(field_release:BERTBuffers.CallResponse.shell_command)
  if (has_shell_command()) {
    clear_has_operation();
    return operation_.shell_command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CallResponse::set_allocated_shell_command(::std::string* shell_command) {
  if (!has_shell_command()) {
    operation_.shell_command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_operation();
  if (shell_command != NULL) {
    set_has_shell_command();
    operation_.shell_command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        shell_command);
  }
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.CallResponse.shell_command)
}

// .BERTBuffers.CompositeFunctionCall function_call = 8;
inline bool CallResponse::has_function_call() const {
  return operation_case() == kFunctionCall;
}
inline void CallResponse::set_has_function_call() {
  _oneof_case_[0] = kFunctionCall;
}
inline void CallResponse::clear_function_call() {
  if (has_function_call()) {
    delete operation_.function_call_;
    clear_has_operation();
  }
}
inline ::BERTBuffers::CompositeFunctionCall* CallResponse::release_function_call() {
  // @@protoc_insertion_point(field_release:BERTBuffers.CallResponse.function_call)
  if (has_function_call()) {
    clear_has_operation();
      ::BERTBuffers::CompositeFunctionCall* temp = operation_.function_call_;
    operation_.function_call_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::CompositeFunctionCall& CallResponse::function_call() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.CallResponse.function_call)
  return has_function_call()
      ? *operation_.function_call_
      : *reinterpret_cast< ::BERTBuffers::CompositeFunctionCall*>(&::BERTBuffers::_CompositeFunctionCall_default_instance_);
}
inline ::BERTBuffers::CompositeFunctionCall* CallResponse::mutable_function_call() {
  if (!has_function_call()) {
    clear_operation();
    set_has_function_call();
    operation_.function_call_ = new ::BERTBuffers::CompositeFunctionCall;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.CallResponse.function_call)
  return operation_.function_call_;
}

// .BERTBuffers.FunctionList function_list = 9;
inline bool CallResponse::has_function_list() const {
  return operation_case() == kFunctionList;
}
inline void CallResponse::set_has_function_list() {
  _oneof_case_[0] = kFunctionList;
}
inline void CallResponse::clear_function_list() {
  if (has_function_list()) {
    delete operation_.function_list_;
    clear_has_operation();
  }
}
inline ::BERTBuffers::FunctionList* CallResponse::release_function_list() {
  // @@protoc_insertion_point(field_release:BERTBuffers.CallResponse.function_list)
  if (has_function_list()) {
    clear_has_operation();
      ::BERTBuffers::FunctionList* temp = operation_.function_list_;
    operation_.function_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::FunctionList& CallResponse::function_list() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.CallResponse.function_list)
  return has_function_list()
      ? *operation_.function_list_
      : *reinterpret_cast< ::BERTBuffers::FunctionList*>(&::BERTBuffers::_FunctionList_default_instance_);
}
inline ::BERTBuffers::FunctionList* CallResponse::mutable_function_list() {
  if (!has_function_list()) {
    clear_operation();
    set_has_function_list();
    operation_.function_list_ = new ::BERTBuffers::FunctionList;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.CallResponse.function_list)
  return operation_.function_list_;
}

// uint32 user_command = 10;
inline bool CallResponse::has_user_command() const {
  return operation_case() == kUserCommand;
}
inline void CallResponse::set_has_user_command() {
  _oneof_case_[0] = kUserCommand;
}
inline void CallResponse::clear_user_command() {
  if (has_user_command()) {
    operation_.user_command_ = 0u;
    clear_has_operation();
  }
}
inline ::google::protobuf::uint32 CallResponse::user_command() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.CallResponse.user_command)
  if (has_user_command()) {
    return operation_.user_command_;
  }
  return 0u;
}
inline void CallResponse::set_user_command(::google::protobuf::uint32 value) {
  if (!has_user_command()) {
    clear_operation();
    set_has_user_command();
  }
  operation_.user_command_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.CallResponse.user_command)
}

inline bool CallResponse::has_operation() const {
  return operation_case() != OPERATION_NOT_SET;
}
inline void CallResponse::clear_has_operation() {
  _oneof_case_[0] = OPERATION_NOT_SET;
}
inline CallResponse::OperationCase CallResponse::operation_case() const {
  return CallResponse::OperationCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace BERTBuffers

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::BERTBuffers::ErrorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BERTBuffers::ErrorType>() {
  return ::BERTBuffers::ErrorType_descriptor();
}
template <> struct is_proto_enum< ::BERTBuffers::CallType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BERTBuffers::CallType>() {
  return ::BERTBuffers::CallType_descriptor();
}
template <> struct is_proto_enum< ::BERTBuffers::CallTarget> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BERTBuffers::CallTarget>() {
  return ::BERTBuffers::CallTarget_descriptor();
}
template <> struct is_proto_enum< ::BERTBuffers::GraphicsUpdateCommand> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BERTBuffers::GraphicsUpdateCommand>() {
  return ::BERTBuffers::GraphicsUpdateCommand_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_variable_2eproto__INCLUDED
